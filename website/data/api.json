{
	"id": 0,
	"name": "react-native-webpack-toolkit",
	"kind": 0,
	"kindString": "Project",
	"flags": {},
	"originalName": "",
	"children": [
		{
			"id": 302,
			"name": "BaseDevServer",
			"kind": 128,
			"kindString": "Class",
			"flags": {},
			"comment": {
				"shortText": "Base class for all Fastify-based servers.\nIt handles creation of a Fastify instance, creation of all WebSocket servers and running Fastify."
			},
			"children": [
				{
					"id": 303,
					"name": "constructor",
					"kind": 512,
					"kindString": "Constructor",
					"flags": {},
					"signatures": [
						{
							"id": 304,
							"name": "new BaseDevServer",
							"kind": 16384,
							"kindString": "Constructor signature",
							"flags": {},
							"comment": {
								"shortText": "Constructs new `BaseDevServer` instance."
							},
							"parameters": [
								{
									"id": 305,
									"name": "config",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Configuration options."
									},
									"type": {
										"type": "reference",
										"id": 294,
										"name": "BaseDevServerConfig"
									}
								},
								{
									"id": 306,
									"name": "loggerOptions",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"text": "Logger options.\n"
									},
									"type": {
										"type": "reference",
										"id": 446,
										"name": "DevServerLoggerOptions"
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 302,
								"name": "BaseDevServer"
							}
						}
					]
				},
				{
					"id": 307,
					"name": "config",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isProtected": true
					},
					"comment": {
						"shortText": "Configuration options."
					},
					"sources": [
						{
							"fileName": "src/server/BaseDevServer.ts",
							"line": 28,
							"character": 18
						}
					],
					"type": {
						"type": "reference",
						"id": 294,
						"name": "BaseDevServerConfig"
					}
				},
				{
					"id": 308,
					"name": "fastify",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "Fastify instance."
					},
					"sources": [
						{
							"fileName": "src/server/BaseDevServer.ts",
							"line": 31,
							"character": 9
						}
					],
					"type": {
						"type": "reference",
						"id": 443,
						"name": "FastifyDevServer"
					}
				},
				{
					"id": 312,
					"name": "wsClientServer",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "Server instance for React Native clients."
					},
					"sources": [
						{
							"fileName": "src/server/BaseDevServer.ts",
							"line": 39,
							"character": 16
						}
					],
					"type": {
						"type": "reference",
						"id": 165,
						"name": "WebSocketDevClientServer"
					}
				},
				{
					"id": 309,
					"name": "wsDebuggerServer",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "Debugger server instance."
					},
					"sources": [
						{
							"fileName": "src/server/BaseDevServer.ts",
							"line": 33,
							"character": 18
						}
					],
					"type": {
						"type": "reference",
						"id": 141,
						"name": "WebSocketDebuggerServer"
					}
				},
				{
					"id": 311,
					"name": "wsEventsServer",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "Events server instance."
					},
					"sources": [
						{
							"fileName": "src/server/BaseDevServer.ts",
							"line": 37,
							"character": 16
						}
					],
					"type": {
						"type": "reference",
						"id": 190,
						"name": "WebSocketEventsServer"
					}
				},
				{
					"id": 310,
					"name": "wsMessageServer",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "Message server instance."
					},
					"sources": [
						{
							"fileName": "src/server/BaseDevServer.ts",
							"line": 35,
							"character": 17
						}
					],
					"type": {
						"type": "reference",
						"id": 241,
						"name": "WebSocketMessageServer"
					}
				},
				{
					"id": 315,
					"name": "run",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "src/server/BaseDevServer.ts",
							"line": 182,
							"character": 11
						}
					],
					"signatures": [
						{
							"id": 316,
							"name": "run",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Runs Fastify and listens on port and host specified in constructor."
							},
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "void"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 313,
					"name": "setup",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "src/server/BaseDevServer.ts",
							"line": 79,
							"character": 13
						}
					],
					"signatures": [
						{
							"id": 314,
							"name": "setup",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Sets up common routes.",
								"text": "All classes that implements {@link BaseDevServer} should call this method before\ncalling {@link run}.\n"
							},
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "void"
									}
								],
								"name": "Promise"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"kind": 512,
					"children": [
						303
					]
				},
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						307,
						308,
						312,
						309,
						311,
						310
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						315,
						313
					]
				}
			],
			"sources": [
				{
					"fileName": "src/server/BaseDevServer.ts",
					"line": 26,
					"character": 26
				}
			],
			"extendedBy": [
				{
					"type": "reference",
					"id": 325,
					"name": "DevServer"
				},
				{
					"type": "reference",
					"id": 358,
					"name": "DevServerProxy"
				}
			]
		},
		{
			"id": 325,
			"name": "DevServer",
			"kind": 128,
			"kindString": "Class",
			"flags": {},
			"comment": {
				"shortText": "Class for setting up and running development server for React Native application.\nIt's usually created by the {@link DevServerPlugin}.",
				"text": "Each `DevServer` instance is platform-specific, for example for `ios` and `android` platforms,\nyou need 2 `DevServer` running (on different ports). Alternatively you can\nuse {@link DevServerProxy} to spawn new processes with Webpack compilations for each platform.\n"
			},
			"children": [
				{
					"id": 330,
					"name": "constructor",
					"kind": 512,
					"kindString": "Constructor",
					"flags": {},
					"signatures": [
						{
							"id": 331,
							"name": "new DevServer",
							"kind": 16384,
							"kindString": "Constructor signature",
							"flags": {},
							"comment": {
								"shortText": "Constructs new `DevServer` instance."
							},
							"parameters": [
								{
									"id": 332,
									"name": "config",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Configuration options."
									},
									"type": {
										"type": "reference",
										"id": 317,
										"name": "DevServerConfig"
									}
								},
								{
									"id": 333,
									"name": "compiler",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Webpack compiler instance.\n"
									},
									"type": {
										"type": "reference",
										"name": "Compiler"
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 325,
								"name": "DevServer"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 304,
								"name": "BaseDevServer.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"id": 303,
						"name": "BaseDevServer.constructor"
					}
				},
				{
					"id": 341,
					"name": "config",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isProtected": true
					},
					"comment": {
						"shortText": "Configuration options."
					},
					"sources": [
						{
							"fileName": "src/server/BaseDevServer.ts",
							"line": 28,
							"character": 18
						}
					],
					"type": {
						"type": "reference",
						"id": 294,
						"name": "BaseDevServerConfig"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 307,
						"name": "BaseDevServer.config"
					}
				},
				{
					"id": 342,
					"name": "fastify",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "Fastify instance."
					},
					"sources": [
						{
							"fileName": "src/server/BaseDevServer.ts",
							"line": 31,
							"character": 9
						}
					],
					"type": {
						"type": "reference",
						"id": 443,
						"name": "FastifyDevServer"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 308,
						"name": "BaseDevServer.fastify"
					}
				},
				{
					"id": 335,
					"name": "hmrServer",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "HMR WebSocket server instance to allow HMR clients to receive updates."
					},
					"sources": [
						{
							"fileName": "src/server/DevServer.ts",
							"line": 53,
							"character": 11
						}
					],
					"type": {
						"type": "reference",
						"id": 214,
						"name": "WebSocketHMRServer"
					}
				},
				{
					"id": 336,
					"name": "symbolicator",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "Symbolicator instance to transform stack traces using Source Maps."
					},
					"sources": [
						{
							"fileName": "src/server/DevServer.ts",
							"line": 55,
							"character": 14
						}
					],
					"type": {
						"type": "reference",
						"id": 417,
						"name": "Symbolicator"
					}
				},
				{
					"id": 334,
					"name": "wdm",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "[webpack-dev-middleware](https://github.com/webpack/webpack-dev-middleware) instance."
					},
					"sources": [
						{
							"fileName": "src/server/DevServer.ts",
							"line": 51,
							"character": 5
						}
					],
					"type": {
						"type": "reference",
						"name": "WebpackDevMiddleware"
					}
				},
				{
					"id": 346,
					"name": "wsClientServer",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "Server instance for React Native clients."
					},
					"sources": [
						{
							"fileName": "src/server/BaseDevServer.ts",
							"line": 39,
							"character": 16
						}
					],
					"type": {
						"type": "reference",
						"id": 165,
						"name": "WebSocketDevClientServer"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 312,
						"name": "BaseDevServer.wsClientServer"
					}
				},
				{
					"id": 343,
					"name": "wsDebuggerServer",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "Debugger server instance."
					},
					"sources": [
						{
							"fileName": "src/server/BaseDevServer.ts",
							"line": 33,
							"character": 18
						}
					],
					"type": {
						"type": "reference",
						"id": 141,
						"name": "WebSocketDebuggerServer"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 309,
						"name": "BaseDevServer.wsDebuggerServer"
					}
				},
				{
					"id": 345,
					"name": "wsEventsServer",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "Events server instance."
					},
					"sources": [
						{
							"fileName": "src/server/BaseDevServer.ts",
							"line": 37,
							"character": 16
						}
					],
					"type": {
						"type": "reference",
						"id": 190,
						"name": "WebSocketEventsServer"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 311,
						"name": "BaseDevServer.wsEventsServer"
					}
				},
				{
					"id": 344,
					"name": "wsMessageServer",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "Message server instance."
					},
					"sources": [
						{
							"fileName": "src/server/BaseDevServer.ts",
							"line": 35,
							"character": 17
						}
					],
					"type": {
						"type": "reference",
						"id": 241,
						"name": "WebSocketMessageServer"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 310,
						"name": "BaseDevServer.wsMessageServer"
					}
				},
				{
					"id": 339,
					"name": "run",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "src/server/DevServer.ts",
							"line": 168,
							"character": 11
						}
					],
					"signatures": [
						{
							"id": 340,
							"name": "run",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Runs development server."
							},
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "void"
									}
								],
								"name": "Promise"
							},
							"overwrites": {
								"type": "reference",
								"id": 316,
								"name": "BaseDevServer.run"
							}
						}
					],
					"overwrites": {
						"type": "reference",
						"id": 315,
						"name": "BaseDevServer.run"
					}
				},
				{
					"id": 337,
					"name": "setup",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "src/server/DevServer.ts",
							"line": 136,
							"character": 13
						}
					],
					"signatures": [
						{
							"id": 338,
							"name": "setup",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Sets up Fastify plugins and routes."
							},
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "void"
									}
								],
								"name": "Promise"
							},
							"overwrites": {
								"type": "reference",
								"id": 314,
								"name": "BaseDevServer.setup"
							}
						}
					],
					"overwrites": {
						"type": "reference",
						"id": 313,
						"name": "BaseDevServer.setup"
					}
				},
				{
					"id": 326,
					"name": "getLoggerOptions",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPrivate": true,
						"isStatic": true
					},
					"sources": [
						{
							"fileName": "src/server/DevServer.ts",
							"line": 31,
							"character": 33
						}
					],
					"signatures": [
						{
							"id": 327,
							"name": "getLoggerOptions",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 328,
									"name": "compiler",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Compiler"
									}
								},
								{
									"id": 329,
									"name": "platform",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 446,
								"name": "DevServerLoggerOptions"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"kind": 512,
					"children": [
						330
					]
				},
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						341,
						342,
						335,
						336,
						334,
						346,
						343,
						345,
						344
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						339,
						337,
						326
					]
				}
			],
			"sources": [
				{
					"fileName": "src/server/DevServer.ts",
					"line": 30,
					"character": 22
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"id": 302,
					"name": "BaseDevServer"
				}
			]
		},
		{
			"id": 10,
			"name": "DevServerPlugin",
			"kind": 128,
			"kindString": "Class",
			"flags": {},
			"comment": {
				"shortText": "Class for running development server that handles serving the built bundle, all assets as well as\nproviding Hot Module Replacement functionality."
			},
			"children": [
				{
					"id": 11,
					"name": "constructor",
					"kind": 512,
					"kindString": "Constructor",
					"flags": {},
					"signatures": [
						{
							"id": 12,
							"name": "new DevServerPlugin",
							"kind": 16384,
							"kindString": "Constructor signature",
							"flags": {},
							"comment": {
								"shortText": "Constructs new `DevServerPlugin`."
							},
							"parameters": [
								{
									"id": 13,
									"name": "config",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"text": "Plugin configuration options. If `undefined`, the development server will be\ndisabled and won't run.\n"
									},
									"type": {
										"type": "reference",
										"id": 1,
										"name": "DevServerPluginConfig"
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 10,
								"name": "DevServerPlugin"
							}
						}
					]
				},
				{
					"id": 14,
					"name": "apply",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "src/webpack/plugins/DevServerPlugin/DevServerPlugin.ts",
							"line": 40,
							"character": 7
						}
					],
					"signatures": [
						{
							"id": 15,
							"name": "apply",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Apply the plugin."
							},
							"parameters": [
								{
									"id": 16,
									"name": "compiler",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Webpack compiler instance.\n"
									},
									"type": {
										"type": "reference",
										"name": "Compiler"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"implementationOf": {
								"type": "reference",
								"id": 491,
								"name": "WebpackPlugin.apply"
							}
						}
					],
					"implementationOf": {
						"type": "reference",
						"id": 490,
						"name": "WebpackPlugin.apply"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"kind": 512,
					"children": [
						11
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						14
					]
				}
			],
			"sources": [
				{
					"fileName": "src/webpack/plugins/DevServerPlugin/DevServerPlugin.ts",
					"line": 22,
					"character": 28
				}
			],
			"implementedTypes": [
				{
					"type": "reference",
					"id": 489,
					"name": "WebpackPlugin"
				}
			]
		},
		{
			"id": 358,
			"name": "DevServerProxy",
			"kind": 128,
			"kindString": "Class",
			"flags": {},
			"comment": {
				"shortText": "Class for spawning new compiler workers for each requested platform and forwarding requests\nto respective platform-specific {@link DevServer}.",
				"text": "The overall architecture is:\n```\n`DevServerProxy`\n├── <compiler worker platform=ios>\n│   └── <webpack compilation>\n│       └── `DevServerPlugin`\n│           └── `DevServer`\n├── <compiler worker platform=android>\n│   └── <webpack compilation>\n│       └── `DevServerPlugin`\n│           └── `DevServer`\n└── ...\n```\n\nEach worker is lazy, meaning it will be spawned upon receiving first request from which\n`platform` can be inferred. This would usually be a request\nfor bundle eg: `index.bundle?platform=ios&...`.\n"
			},
			"children": [
				{
					"id": 367,
					"name": "constructor",
					"kind": 512,
					"kindString": "Constructor",
					"flags": {},
					"signatures": [
						{
							"id": 368,
							"name": "new DevServerProxy",
							"kind": 16384,
							"kindString": "Constructor signature",
							"flags": {},
							"comment": {
								"shortText": "Constructs new `DevServerProxy`."
							},
							"parameters": [
								{
									"id": 369,
									"name": "config",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Configuration options."
									},
									"type": {
										"type": "reference",
										"id": 347,
										"name": "DevServerProxyConfig"
									}
								},
								{
									"id": 370,
									"name": "cliOptions",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "CLI options (usually provided by {@link start} command based on arguments\nfrom React Native CLI.)\n"
									},
									"type": {
										"type": "reference",
										"id": 525,
										"name": "CliOptions"
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 358,
								"name": "DevServerProxy"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 304,
								"name": "BaseDevServer.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"id": 303,
						"name": "BaseDevServer.constructor"
					}
				},
				{
					"id": 385,
					"name": "config",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isProtected": true
					},
					"comment": {
						"shortText": "Configuration options."
					},
					"sources": [
						{
							"fileName": "src/server/BaseDevServer.ts",
							"line": 28,
							"character": 18
						}
					],
					"type": {
						"type": "reference",
						"id": 294,
						"name": "BaseDevServerConfig"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 307,
						"name": "BaseDevServer.config"
					}
				},
				{
					"id": 386,
					"name": "fastify",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "Fastify instance."
					},
					"sources": [
						{
							"fileName": "src/server/BaseDevServer.ts",
							"line": 31,
							"character": 9
						}
					],
					"type": {
						"type": "reference",
						"id": 443,
						"name": "FastifyDevServer"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 308,
						"name": "BaseDevServer.fastify"
					}
				},
				{
					"id": 372,
					"name": "reporter",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "Reporter instance."
					},
					"sources": [
						{
							"fileName": "src/server/DevServerProxy.ts",
							"line": 82,
							"character": 10
						}
					],
					"type": {
						"type": "reference",
						"id": 568,
						"name": "Reporter"
					},
					"defaultValue": "..."
				},
				{
					"id": 371,
					"name": "workers",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "Platform to worker mappings."
					},
					"sources": [
						{
							"fileName": "src/server/DevServerProxy.ts",
							"line": 80,
							"character": 9
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 355,
										"name": "CompilerWorker"
									}
								],
								"name": "Promise"
							}
						],
						"name": "Record"
					},
					"defaultValue": "..."
				},
				{
					"id": 390,
					"name": "wsClientServer",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "Server instance for React Native clients."
					},
					"sources": [
						{
							"fileName": "src/server/BaseDevServer.ts",
							"line": 39,
							"character": 16
						}
					],
					"type": {
						"type": "reference",
						"id": 165,
						"name": "WebSocketDevClientServer"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 312,
						"name": "BaseDevServer.wsClientServer"
					}
				},
				{
					"id": 387,
					"name": "wsDebuggerServer",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "Debugger server instance."
					},
					"sources": [
						{
							"fileName": "src/server/BaseDevServer.ts",
							"line": 33,
							"character": 18
						}
					],
					"type": {
						"type": "reference",
						"id": 141,
						"name": "WebSocketDebuggerServer"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 309,
						"name": "BaseDevServer.wsDebuggerServer"
					}
				},
				{
					"id": 389,
					"name": "wsEventsServer",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "Events server instance."
					},
					"sources": [
						{
							"fileName": "src/server/BaseDevServer.ts",
							"line": 37,
							"character": 16
						}
					],
					"type": {
						"type": "reference",
						"id": 190,
						"name": "WebSocketEventsServer"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 311,
						"name": "BaseDevServer.wsEventsServer"
					}
				},
				{
					"id": 388,
					"name": "wsMessageServer",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "Message server instance."
					},
					"sources": [
						{
							"fileName": "src/server/BaseDevServer.ts",
							"line": 35,
							"character": 17
						}
					],
					"type": {
						"type": "reference",
						"id": 241,
						"name": "WebSocketMessageServer"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 310,
						"name": "BaseDevServer.wsMessageServer"
					}
				},
				{
					"id": 376,
					"name": "forwardRequest",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "src/server/DevServerProxy.ts",
							"line": 196,
							"character": 22
						}
					],
					"signatures": [
						{
							"id": 377,
							"name": "forwardRequest",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Forward request to a {@link DevServer} running inside compiler worker for the `platform`."
							},
							"parameters": [
								{
									"id": 378,
									"name": "platform",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Application platform."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 379,
									"name": "request",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Request instance to forward."
									},
									"type": {
										"type": "reference",
										"id": 444,
										"name": "DevServerRequest"
									}
								},
								{
									"id": 380,
									"name": "reply",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Reply instance to send received data through.\n"
									},
									"type": {
										"type": "reference",
										"id": 445,
										"name": "DevServerReply"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "void"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 383,
					"name": "run",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "src/server/DevServerProxy.ts",
							"line": 302,
							"character": 11
						}
					],
					"signatures": [
						{
							"id": 384,
							"name": "run",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Runs the proxy."
							},
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "void"
									}
								],
								"name": "Promise"
							},
							"overwrites": {
								"type": "reference",
								"id": 316,
								"name": "BaseDevServer.run"
							}
						}
					],
					"overwrites": {
						"type": "reference",
						"id": 315,
						"name": "BaseDevServer.run"
					}
				},
				{
					"id": 373,
					"name": "runWorker",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "src/server/DevServerProxy.ts",
							"line": 106,
							"character": 17
						}
					],
					"signatures": [
						{
							"id": 374,
							"name": "runWorker",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Spawn new compiler worker for given `platform`.\nIf the worker is already running, a warning is emitted and the method stops it's execution.\nThe port on which {@link DevServer} inside worker will be running is random, so no assumptions\nshould be taken regarding the port number."
							},
							"parameters": [
								{
									"id": 375,
									"name": "platform",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Application platform for which to spawn new worker.\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "void"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 381,
					"name": "setup",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "src/server/DevServerProxy.ts",
							"line": 228,
							"character": 13
						}
					],
					"signatures": [
						{
							"id": 382,
							"name": "setup",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Sets up routes."
							},
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "void"
									}
								],
								"name": "Promise"
							},
							"overwrites": {
								"type": "reference",
								"id": 314,
								"name": "BaseDevServer.setup"
							}
						}
					],
					"overwrites": {
						"type": "reference",
						"id": 313,
						"name": "BaseDevServer.setup"
					}
				},
				{
					"id": 359,
					"name": "getLoggerOptions",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPrivate": true,
						"isStatic": true
					},
					"sources": [
						{
							"fileName": "src/server/DevServerProxy.ts",
							"line": 61,
							"character": 33
						}
					],
					"signatures": [
						{
							"id": 360,
							"name": "getLoggerOptions",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 361,
									"name": "getReporter",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 362,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 363,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"type": {
														"type": "reference",
														"id": 568,
														"name": "Reporter"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 364,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"children": [
										{
											"id": 366,
											"name": "level",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											},
											"defaultValue": "..."
										},
										{
											"id": 365,
											"name": "stream",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Writable"
											},
											"defaultValue": "..."
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												366,
												365
											]
										}
									]
								}
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"kind": 512,
					"children": [
						367
					]
				},
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						385,
						386,
						372,
						371,
						390,
						387,
						389,
						388
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						376,
						383,
						373,
						381,
						359
					]
				}
			],
			"sources": [
				{
					"fileName": "src/server/DevServerProxy.ts",
					"line": 60,
					"character": 27
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"id": 302,
					"name": "BaseDevServer"
				}
			]
		},
		{
			"id": 42,
			"name": "JavaScriptLooseModePlugin",
			"kind": 128,
			"kindString": "Class",
			"flags": {},
			"comment": {
				"shortText": "Enable JavaScript loose mode, by removing `use strict` directives from the code.\nThis plugin should only be used for compatibility reasons with Metro, where some libraries\nmight not work in JavaScript Strict mode."
			},
			"children": [
				{
					"id": 43,
					"name": "constructor",
					"kind": 512,
					"kindString": "Constructor",
					"flags": {},
					"signatures": [
						{
							"id": 44,
							"name": "new JavaScriptLooseModePlugin",
							"kind": 16384,
							"kindString": "Constructor signature",
							"flags": {},
							"comment": {
								"shortText": "Constructs new `JavaScriptLooseModePlugin`."
							},
							"parameters": [
								{
									"id": 45,
									"name": "config",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Plugin configuration options.\n"
									},
									"type": {
										"type": "reference",
										"id": 37,
										"name": "JavaScriptLooseModePluginConfig"
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 42,
								"name": "JavaScriptLooseModePlugin"
							}
						}
					]
				},
				{
					"id": 46,
					"name": "shouldUseLoosMode",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isPrivate": true
					},
					"sources": [
						{
							"fileName": "src/webpack/plugins/JavaScriptLooseModePlugin.ts",
							"line": 27,
							"character": 27
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 47,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"signatures": [
								{
									"id": 48,
									"name": "__type",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 49,
											"name": "filename",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "boolean"
									}
								}
							]
						}
					}
				},
				{
					"id": 50,
					"name": "apply",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "src/webpack/plugins/JavaScriptLooseModePlugin.ts",
							"line": 64,
							"character": 7
						}
					],
					"signatures": [
						{
							"id": 51,
							"name": "apply",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Apply the plugin."
							},
							"parameters": [
								{
									"id": 52,
									"name": "compiler",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Webpack compiler instance.\n"
									},
									"type": {
										"type": "reference",
										"name": "Compiler"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"implementationOf": {
								"type": "reference",
								"id": 491,
								"name": "WebpackPlugin.apply"
							}
						}
					],
					"implementationOf": {
						"type": "reference",
						"id": 490,
						"name": "WebpackPlugin.apply"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"kind": 512,
					"children": [
						43
					]
				},
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						46
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						50
					]
				}
			],
			"sources": [
				{
					"fileName": "src/webpack/plugins/JavaScriptLooseModePlugin.ts",
					"line": 26,
					"character": 38
				}
			],
			"implementedTypes": [
				{
					"type": "reference",
					"id": 489,
					"name": "WebpackPlugin"
				}
			]
		},
		{
			"id": 65,
			"name": "LoggerPlugin",
			"kind": 128,
			"kindString": "Class",
			"flags": {},
			"comment": {
				"shortText": "Logger plugin that handles all logging coming from the Webpack ecosystem, including compilation\nprogress as well as debug logs from other plugins and resolvers."
			},
			"children": [
				{
					"id": 67,
					"name": "constructor",
					"kind": 512,
					"kindString": "Constructor",
					"flags": {},
					"signatures": [
						{
							"id": 68,
							"name": "new LoggerPlugin",
							"kind": 16384,
							"kindString": "Constructor signature",
							"flags": {},
							"comment": {
								"shortText": "Constructs new `LoggerPlugin`."
							},
							"parameters": [
								{
									"id": 69,
									"name": "config",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Plugin configuration options.\n"
									},
									"type": {
										"type": "reference",
										"id": 54,
										"name": "LoggerPluginConfig"
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 65,
								"name": "LoggerPlugin"
							}
						}
					]
				},
				{
					"id": 70,
					"name": "reporter",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isReadonly": true
					},
					"comment": {
						"shortText": "{@link Reporter} instance used to actually writing logs to terminal/file."
					},
					"sources": [
						{
							"fileName": "src/webpack/plugins/LoggerPlugin.ts",
							"line": 36,
							"character": 19
						}
					],
					"type": {
						"type": "reference",
						"id": 568,
						"name": "Reporter"
					},
					"defaultValue": "..."
				},
				{
					"id": 66,
					"name": "SUPPORTED_TYPES",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isPrivate": true,
						"isStatic": true
					},
					"sources": [
						{
							"fileName": "src/webpack/plugins/LoggerPlugin.ts",
							"line": 33,
							"character": 32
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "intrinsic",
							"name": "string"
						}
					},
					"defaultValue": "..."
				},
				{
					"id": 80,
					"name": "apply",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "src/webpack/plugins/LoggerPlugin.ts",
							"line": 108,
							"character": 7
						}
					],
					"signatures": [
						{
							"id": 81,
							"name": "apply",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Apply the plugin."
							},
							"parameters": [
								{
									"id": 82,
									"name": "compiler",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Webpack compiler instance.\n"
									},
									"type": {
										"type": "reference",
										"name": "Compiler"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"implementationOf": {
								"type": "reference",
								"id": 491,
								"name": "WebpackPlugin.apply"
							}
						}
					],
					"implementationOf": {
						"type": "reference",
						"id": 490,
						"name": "WebpackPlugin.apply"
					}
				},
				{
					"id": 71,
					"name": "createEntry",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "src/webpack/plugins/LoggerPlugin.ts",
							"line": 62,
							"character": 13
						}
					],
					"signatures": [
						{
							"id": 72,
							"name": "createEntry",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Create log entry from Webpack log message from {@link WebpackLogger}.",
								"returns": "Log entry object or undefined when if message is invalid.\n"
							},
							"parameters": [
								{
									"id": 73,
									"name": "issuer",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Issuer of the message."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 74,
									"name": "type",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Type of the message."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 75,
									"name": "args",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The body of the message."
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "any"
										}
									}
								},
								{
									"id": 76,
									"name": "timestamp",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"text": "Timestamp when the message was recorder."
									},
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "reference",
										"id": 551,
										"name": "LogEntry"
									}
								]
							}
						}
					]
				},
				{
					"id": 77,
					"name": "processEntry",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "src/webpack/plugins/LoggerPlugin.ts",
							"line": 87,
							"character": 14
						}
					],
					"signatures": [
						{
							"id": 78,
							"name": "processEntry",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Process log entry and pass it to {@link reporter} instance."
							},
							"parameters": [
								{
									"id": 79,
									"name": "entry",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Log entry to process\n"
									},
									"type": {
										"type": "reference",
										"id": 551,
										"name": "LogEntry"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"kind": 512,
					"children": [
						67
					]
				},
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						70,
						66
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						80,
						71,
						77
					]
				}
			],
			"sources": [
				{
					"fileName": "src/webpack/plugins/LoggerPlugin.ts",
					"line": 32,
					"character": 25
				}
			],
			"implementedTypes": [
				{
					"type": "reference",
					"id": 489,
					"name": "WebpackPlugin"
				}
			]
		},
		{
			"id": 24,
			"name": "ReactNativeAssetsPlugin",
			"kind": 128,
			"kindString": "Class",
			"flags": {},
			"comment": {
				"shortText": "Plugin for loading and processing assets (images, audio, video etc) for\nReact Native applications.",
				"text": "Assets processing in React Native differs from Web, Node.js or other targets. This plugin allows\nyou to use assets in the same way as you would do when using Metro.\n"
			},
			"children": [
				{
					"id": 25,
					"name": "constructor",
					"kind": 512,
					"kindString": "Constructor",
					"flags": {},
					"signatures": [
						{
							"id": 26,
							"name": "new ReactNativeAssetsPlugin",
							"kind": 16384,
							"kindString": "Constructor signature",
							"flags": {},
							"comment": {
								"shortText": "Constructs new `ReactNativeAssetsPlugin`."
							},
							"parameters": [
								{
									"id": 27,
									"name": "config",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Plugin configuration options.\n"
									},
									"type": {
										"type": "reference",
										"id": 17,
										"name": "ReactNativeAssetsPluginConfig"
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 24,
								"name": "ReactNativeAssetsPlugin"
							}
						}
					]
				},
				{
					"id": 28,
					"name": "apply",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "src/webpack/plugins/ReactNativeAssetsPlugin/ReactNativeAssetsPlugin.ts",
							"line": 57,
							"character": 7
						}
					],
					"signatures": [
						{
							"id": 29,
							"name": "apply",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Apply the plugin."
							},
							"parameters": [
								{
									"id": 30,
									"name": "compiler",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Webpack compiler instance.\n"
									},
									"type": {
										"type": "reference",
										"name": "Compiler"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"implementationOf": {
								"type": "reference",
								"id": 491,
								"name": "WebpackPlugin.apply"
							}
						}
					],
					"implementationOf": {
						"type": "reference",
						"id": 490,
						"name": "WebpackPlugin.apply"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"kind": 512,
					"children": [
						25
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						28
					]
				}
			],
			"sources": [
				{
					"fileName": "src/webpack/plugins/ReactNativeAssetsPlugin/ReactNativeAssetsPlugin.ts",
					"line": 44,
					"character": 36
				}
			],
			"implementedTypes": [
				{
					"type": "reference",
					"id": 489,
					"name": "WebpackPlugin"
				}
			]
		},
		{
			"id": 31,
			"name": "ReactNativeTargetPlugin",
			"kind": 128,
			"kindString": "Class",
			"flags": {},
			"comment": {
				"shortText": "Plugin for tweaking the JavaScript runtime code to account for React Native environment.",
				"text": "Globally available APIs differ with React Native and other target's like Web, so there are some\ntweaks necessary to make the final bundle runnable inside React Native's JavaScript VM.\n"
			},
			"children": [
				{
					"id": 32,
					"name": "constructor",
					"kind": 512,
					"kindString": "Constructor",
					"flags": {},
					"signatures": [
						{
							"id": 33,
							"name": "new ReactNativeTargetPlugin",
							"kind": 16384,
							"kindString": "Constructor signature",
							"flags": {},
							"type": {
								"type": "reference",
								"id": 31,
								"name": "ReactNativeTargetPlugin"
							}
						}
					]
				},
				{
					"id": 34,
					"name": "apply",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "src/webpack/plugins/ReactNativeTarget/ReactNativeTargetPlugin.ts",
							"line": 21,
							"character": 7
						}
					],
					"signatures": [
						{
							"id": 35,
							"name": "apply",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Apply the plugin."
							},
							"parameters": [
								{
									"id": 36,
									"name": "compiler",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Webpack compiler instance.\n"
									},
									"type": {
										"type": "reference",
										"name": "Compiler"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"implementationOf": {
								"type": "reference",
								"id": 491,
								"name": "WebpackPlugin.apply"
							}
						}
					],
					"implementationOf": {
						"type": "reference",
						"id": 490,
						"name": "WebpackPlugin.apply"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"kind": 512,
					"children": [
						32
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						34
					]
				}
			],
			"sources": [
				{
					"fileName": "src/webpack/plugins/ReactNativeTarget/ReactNativeTargetPlugin.ts",
					"line": 15,
					"character": 36
				}
			],
			"implementedTypes": [
				{
					"type": "reference",
					"id": 489,
					"name": "WebpackPlugin"
				}
			]
		},
		{
			"id": 568,
			"name": "Reporter",
			"kind": 128,
			"kindString": "Class",
			"flags": {},
			"comment": {
				"shortText": "Class that handles all reporting, logging and compilation progress handling."
			},
			"children": [
				{
					"id": 576,
					"name": "constructor",
					"kind": 512,
					"kindString": "Constructor",
					"flags": {},
					"signatures": [
						{
							"id": 577,
							"name": "new Reporter",
							"kind": 16384,
							"kindString": "Constructor signature",
							"flags": {},
							"comment": {
								"shortText": "Create new instance of Reporter.\nIf Reporter is running as a non-worker, it will start outputting to terminal."
							},
							"parameters": [
								{
									"id": 578,
									"name": "config",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Reporter configuration. Defaults to empty object.\n"
									},
									"type": {
										"type": "reference",
										"id": 566,
										"name": "ReporterConfig"
									},
									"defaultValue": "..."
								}
							],
							"type": {
								"type": "reference",
								"id": 568,
								"name": "Reporter"
							}
						}
					]
				},
				{
					"id": 583,
					"name": "fileLogBuffer",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isPrivate": true
					},
					"sources": [
						{
							"fileName": "src/Reporter.ts",
							"line": 90,
							"character": 23
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "intrinsic",
							"name": "string"
						}
					},
					"defaultValue": "..."
				},
				{
					"id": 580,
					"name": "isVerbose",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isPublic": true,
						"isReadonly": true
					},
					"comment": {
						"shortText": "Whether reporter is running in verbose mode."
					},
					"sources": [
						{
							"fileName": "src/Reporter.ts",
							"line": 86,
							"character": 27
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 579,
					"name": "isWorker",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isPublic": true,
						"isReadonly": true
					},
					"comment": {
						"shortText": "Whether reporter is running as a worker."
					},
					"sources": [
						{
							"fileName": "src/Reporter.ts",
							"line": 84,
							"character": 26
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 581,
					"name": "ora",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isPrivate": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "src/Reporter.ts",
							"line": 88,
							"character": 13
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "reference",
								"name": "Ora"
							}
						]
					}
				},
				{
					"id": 584,
					"name": "outputFilename",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isPrivate": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "src/Reporter.ts",
							"line": 91,
							"character": 24
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "string"
							}
						]
					}
				},
				{
					"id": 585,
					"name": "progress",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isPrivate": true
					},
					"sources": [
						{
							"fileName": "src/Reporter.ts",
							"line": 92,
							"character": 18
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "reflection",
								"declaration": {
									"id": 586,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"children": [
										{
											"id": 588,
											"name": "label",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "src/Reporter.ts",
													"line": 92,
													"character": 57
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										},
										{
											"id": 587,
											"name": "value",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "src/Reporter.ts",
													"line": 92,
													"character": 42
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "number"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												588,
												587
											]
										}
									]
								}
							}
						],
						"name": "Record"
					},
					"defaultValue": "..."
				},
				{
					"id": 582,
					"name": "requestBuffer",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isPrivate": true
					},
					"sources": [
						{
							"fileName": "src/Reporter.ts",
							"line": 89,
							"character": 23
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "number"
							},
							{
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "reference",
										"name": "ReqLogData"
									}
								]
							}
						],
						"name": "Record"
					},
					"defaultValue": "..."
				},
				{
					"id": 591,
					"name": "enableFileLogging",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "src/Reporter.ts",
							"line": 122,
							"character": 19
						}
					],
					"signatures": [
						{
							"id": 592,
							"name": "enableFileLogging",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Enable reporting to file alongside reporting to terminal."
							},
							"parameters": [
								{
									"id": 593,
									"name": "filename",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Absolute path to file to which write logs.\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 594,
					"name": "flushFileLogs",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "src/Reporter.ts",
							"line": 130,
							"character": 15
						}
					],
					"signatures": [
						{
							"id": 595,
							"name": "flushFileLogs",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Flush all buffered logs to a file provided that file\nreporting was enabled with {@link enableFileLogging}."
							},
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 604,
					"name": "getOutputLogMessage",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPrivate": true
					},
					"sources": [
						{
							"fileName": "src/Reporter.ts",
							"line": 193,
							"character": 29
						}
					],
					"signatures": [
						{
							"id": 605,
							"name": "getOutputLogMessage",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 606,
									"name": "logEntry",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 551,
										"name": "LogEntry"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						}
					]
				},
				{
					"id": 601,
					"name": "isProgress",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPrivate": true
					},
					"sources": [
						{
							"fileName": "src/Reporter.ts",
							"line": 189,
							"character": 20
						}
					],
					"signatures": [
						{
							"id": 602,
							"name": "isProgress",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 603,
									"name": "logEntry",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 551,
										"name": "LogEntry"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					]
				},
				{
					"id": 596,
					"name": "process",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "src/Reporter.ts",
							"line": 143,
							"character": 9
						}
					],
					"signatures": [
						{
							"id": 597,
							"name": "process",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Process new log entry and report it to terminal and file if file reporting was enabled with\n{@link enableFileLogging}."
							},
							"parameters": [
								{
									"id": 598,
									"name": "logEntry",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Log entry to process & report.\n"
									},
									"type": {
										"type": "reference",
										"id": 551,
										"name": "LogEntry"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 589,
					"name": "stop",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "src/Reporter.ts",
							"line": 111,
							"character": 6
						}
					],
					"signatures": [
						{
							"id": 590,
							"name": "stop",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Stop reporting and perform cleanup."
							},
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 599,
					"name": "updateProgress",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPrivate": true
					},
					"sources": [
						{
							"fileName": "src/Reporter.ts",
							"line": 180,
							"character": 24
						}
					],
					"signatures": [
						{
							"id": 600,
							"name": "updateProgress",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 572,
					"name": "colorizeText",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isStatic": true
					},
					"sources": [
						{
							"fileName": "src/Reporter.ts",
							"line": 73,
							"character": 21
						}
					],
					"signatures": [
						{
							"id": 573,
							"name": "colorizeText",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Apply ANSI colors to given text.",
								"returns": "Text wrapped in ANSI color sequences.\n",
								"tags": [
									{
										"tag": "internal",
										"text": "\n"
									}
								]
							},
							"parameters": [
								{
									"id": 574,
									"name": "logType",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Log type for the text, based on which different colors will be applied."
									},
									"type": {
										"type": "reference",
										"id": 550,
										"name": "LogType"
									}
								},
								{
									"id": 575,
									"name": "text",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Text to apply the color onto."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					]
				},
				{
					"id": 569,
					"name": "getSymbolForType",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isStatic": true
					},
					"sources": [
						{
							"fileName": "src/Reporter.ts",
							"line": 56,
							"character": 25
						}
					],
					"signatures": [
						{
							"id": 570,
							"name": "getSymbolForType",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Get message symbol for given log type.",
								"returns": "String with the symbol.\n",
								"tags": [
									{
										"tag": "internal",
										"text": "\n"
									}
								]
							},
							"parameters": [
								{
									"id": 571,
									"name": "logType",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Log type."
									},
									"type": {
										"type": "reference",
										"id": 550,
										"name": "LogType"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"kind": 512,
					"children": [
						576
					]
				},
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						583,
						580,
						579,
						581,
						584,
						585,
						582
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						591,
						594,
						604,
						601,
						596,
						589,
						599,
						572,
						569
					]
				}
			],
			"sources": [
				{
					"fileName": "src/Reporter.ts",
					"line": 47,
					"character": 21
				}
			]
		},
		{
			"id": 417,
			"name": "Symbolicator",
			"kind": 128,
			"kindString": "Class",
			"flags": {},
			"comment": {
				"shortText": "Class for transforming stack traces from React Native application with using Source Map.\nRaw stack frames produced by React Native, points to some location from the bundle\neg `index.bundle?platform=ios:567:1234`. By using Source Map for that bundle `Symbolicator`\nproduces frames that point to source code inside your project eg `Hello.tsx:10:9`."
			},
			"children": [
				{
					"id": 421,
					"name": "constructor",
					"kind": 512,
					"kindString": "Constructor",
					"flags": {},
					"signatures": [
						{
							"id": 422,
							"name": "new Symbolicator",
							"kind": 16384,
							"kindString": "Constructor signature",
							"flags": {},
							"comment": {
								"shortText": "Constructs new `Symbolicator` instance."
							},
							"parameters": [
								{
									"id": 423,
									"name": "projectRoot",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Absolute path to root directory of the project."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 424,
									"name": "logger",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Fastify logger instance."
									},
									"type": {
										"type": "reference",
										"name": "FastifyLoggerInstance"
									}
								},
								{
									"id": 425,
									"name": "readFileFromWdm",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Function to read arbitrary file from webpack-dev-middleware."
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 426,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 427,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 428,
															"name": "fileUrl",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"type": {
														"type": "reference",
														"typeArguments": [
															{
																"type": "intrinsic",
																"name": "string"
															}
														],
														"name": "Promise"
													}
												}
											]
										}
									}
								},
								{
									"id": 429,
									"name": "readSourceMapFromWdm",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Function to read Source Map file from webpack-dev-middleware.\n"
									},
									"type": {
										"type": "reflection",
										"declaration": {
											"id": 430,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 431,
													"name": "__type",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 432,
															"name": "fileUrl",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "intrinsic",
																"name": "string"
															}
														}
													],
													"type": {
														"type": "reference",
														"typeArguments": [
															{
																"type": "intrinsic",
																"name": "string"
															}
														],
														"name": "Promise"
													}
												}
											]
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 417,
								"name": "Symbolicator"
							}
						}
					]
				},
				{
					"id": 433,
					"name": "sourceMapConsumerCache",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "Cache with initialized `SourceMapConsumer` to improve symbolication performance."
					},
					"sources": [
						{
							"fileName": "src/server/Symbolicator.ts",
							"line": 93,
							"character": 24
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "reference",
								"name": "SourceMapConsumer"
							}
						],
						"name": "Record"
					},
					"defaultValue": "..."
				},
				{
					"id": 440,
					"name": "getCodeFrame",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPrivate": true
					},
					"sources": [
						{
							"fileName": "src/server/Symbolicator.ts",
							"line": 196,
							"character": 28
						}
					],
					"signatures": [
						{
							"id": 441,
							"name": "getCodeFrame",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 442,
									"name": "processedFrames",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"id": 401,
											"name": "StackFrame"
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "undefined"
											},
											{
												"type": "reference",
												"id": 407,
												"name": "CodeFrame"
											}
										]
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 434,
					"name": "process",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "src/server/Symbolicator.ts",
							"line": 121,
							"character": 15
						}
					],
					"signatures": [
						{
							"id": 435,
							"name": "process",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Process raw React Native stack frames and transform them using Source Maps.\nMethod will try to symbolicate as much data as possible, but if the Source Maps\nare not available, invalid or the original positions/data is not found in Source Maps,\nthe method will return raw values - the same as supplied with `stack` parameter.\nFor example out of 10 frames, it's possible that only first 7 will be symbolicated and the\nremaining 3 will be unchanged.",
								"returns": "Symbolicated stack frames.\n"
							},
							"parameters": [
								{
									"id": 436,
									"name": "stack",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Raw stack frames."
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"id": 391,
											"name": "ReactNativeStackFrame"
										}
									}
								}
							],
							"type": {
								"type": "reference",
								"typeArguments": [
									{
										"type": "reference",
										"id": 414,
										"name": "SymbolicatorResults"
									}
								],
								"name": "Promise"
							}
						}
					]
				},
				{
					"id": 437,
					"name": "processFrame",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isPrivate": true
					},
					"sources": [
						{
							"fileName": "src/server/Symbolicator.ts",
							"line": 155,
							"character": 22
						}
					],
					"signatures": [
						{
							"id": 438,
							"name": "processFrame",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 439,
									"name": "frame",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 396,
										"name": "InputStackFrame"
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 401,
								"name": "StackFrame"
							}
						}
					]
				},
				{
					"id": 418,
					"name": "inferPlatformFromStack",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isStatic": true
					},
					"sources": [
						{
							"fileName": "src/server/Symbolicator.ts",
							"line": 70,
							"character": 31
						}
					],
					"signatures": [
						{
							"id": 419,
							"name": "inferPlatformFromStack",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Infer platform from stack frames.\nUsually at least one frame has `file` field with the bundle URL eg:\n`http://localhost:8081/index.bundle?platform=ios&...`, which can be used to infer platform.",
								"returns": "Inferred platform or `undefined` if cannot infer.\n"
							},
							"parameters": [
								{
									"id": 420,
									"name": "stack",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Array of stack frames."
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"id": 391,
											"name": "ReactNativeStackFrame"
										}
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"kind": 512,
					"children": [
						421
					]
				},
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						433
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						440,
						434,
						437,
						418
					]
				}
			],
			"sources": [
				{
					"fileName": "src/server/Symbolicator.ts",
					"line": 61,
					"character": 25
				}
			]
		},
		{
			"id": 141,
			"name": "WebSocketDebuggerServer",
			"kind": 128,
			"kindString": "Class",
			"flags": {},
			"comment": {
				"shortText": "Class for creating a WebSocket server and providing a bridge between\ndebugger UI (Remote JS debugger) and the running React Native application.",
				"text": "React Native application (aka client) will send and receive messages from the debugger UI\nwhich runs inside a browser.\n"
			},
			"children": [
				{
					"id": 142,
					"name": "constructor",
					"kind": 512,
					"kindString": "Constructor",
					"flags": {},
					"signatures": [
						{
							"id": 143,
							"name": "new WebSocketDebuggerServer",
							"kind": 16384,
							"kindString": "Constructor signature",
							"flags": {},
							"comment": {
								"shortText": "Create new instance of WebSocketDebuggerServer and attach it to the given Fastify instance.\nAny logging information, will be passed through standard `fastify.log` API."
							},
							"parameters": [
								{
									"id": 144,
									"name": "fastify",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Fastify instance to attach the WebSocket server to.\n"
									},
									"type": {
										"type": "reference",
										"id": 443,
										"name": "FastifyDevServer"
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 141,
								"name": "WebSocketDebuggerServer"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 131,
								"name": "WebSocketServer.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"id": 130,
						"name": "WebSocketServer.constructor"
					}
				},
				{
					"id": 146,
					"name": "clientSocket",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isPrivate": true
					},
					"comment": {
						"shortText": "A WebSocket connection with the client (React Native app)."
					},
					"sources": [
						{
							"fileName": "src/server/ws/WebSocketDebuggerServer.ts",
							"line": 24,
							"character": 22
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "reference",
								"name": "WebSocket"
							}
						]
					}
				},
				{
					"id": 145,
					"name": "debuggerSocket",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isPrivate": true
					},
					"comment": {
						"shortText": "A WebSocket connection with the debugger UI."
					},
					"sources": [
						{
							"fileName": "src/server/ws/WebSocketDebuggerServer.ts",
							"line": 19,
							"character": 24
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "reference",
								"name": "WebSocket"
							}
						]
					}
				},
				{
					"id": 164,
					"name": "fastify",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isProtected": true
					},
					"comment": {
						"shortText": "Fastify instance from which {@link server} will receive upgrade connections."
					},
					"sources": [
						{
							"fileName": "src/server/ws/WebSocketServer.ts",
							"line": 17,
							"character": 19
						}
					],
					"type": {
						"type": "reference",
						"id": 443,
						"name": "FastifyDevServer"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 136,
						"name": "WebSocketServer.fastify"
					}
				},
				{
					"id": 163,
					"name": "server",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isProtected": true
					},
					"comment": {
						"shortText": "An instance of the underlying WebSocket server."
					},
					"sources": [
						{
							"fileName": "src/server/ws/WebSocketServer.ts",
							"line": 14,
							"character": 18
						}
					],
					"type": {
						"type": "reference",
						"name": "Server"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 135,
						"name": "WebSocketServer.server"
					}
				},
				{
					"id": 147,
					"name": "isDebuggerConnected",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "src/server/ws/WebSocketDebuggerServer.ts",
							"line": 39,
							"character": 21
						}
					],
					"signatures": [
						{
							"id": 148,
							"name": "isDebuggerConnected",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Check if debugger UI is connected to the WebSocketDebuggerServer."
							},
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					]
				},
				{
					"id": 160,
					"name": "onClientConnection",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "src/server/ws/WebSocketDebuggerServer.ts",
							"line": 110,
							"character": 20
						}
					],
					"signatures": [
						{
							"id": 161,
							"name": "onClientConnection",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Process new WebSocket connection from React Native app (client)\nand close any previous connection."
							},
							"parameters": [
								{
									"id": 162,
									"name": "socket",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Incoming client WebSocket connection.\n"
									},
									"type": {
										"type": "reference",
										"name": "WebSocket"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 153,
					"name": "onConnection",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "src/server/ws/WebSocketDebuggerServer.ts",
							"line": 64,
							"character": 14
						}
					],
					"signatures": [
						{
							"id": 154,
							"name": "onConnection",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Process new WebSocket connection. The upgrade request should contain `role` query param\nfor determining the type of the connection."
							},
							"parameters": [
								{
									"id": 155,
									"name": "socket",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Incoming WebSocket connection."
									},
									"type": {
										"type": "reference",
										"name": "WebSocket"
									}
								},
								{
									"id": 156,
									"name": "request",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Upgrade request for the connection.\n"
									},
									"type": {
										"type": "reference",
										"name": "IncomingMessage"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"overwrites": {
								"type": "reference",
								"id": 138,
								"name": "WebSocketServer.onConnection"
							}
						}
					],
					"overwrites": {
						"type": "reference",
						"id": 137,
						"name": "WebSocketServer.onConnection"
					}
				},
				{
					"id": 157,
					"name": "onDebuggerConnection",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "src/server/ws/WebSocketDebuggerServer.ts",
							"line": 83,
							"character": 22
						}
					],
					"signatures": [
						{
							"id": 158,
							"name": "onDebuggerConnection",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Process new WebSocket connection from Debugger UI (Remote JS Debugger).\nIf there's already open connection, the new one gets closed automatically."
							},
							"parameters": [
								{
									"id": 159,
									"name": "socket",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Incoming debugger WebSocket connection.\n"
									},
									"type": {
										"type": "reference",
										"name": "WebSocket"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 149,
					"name": "send",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "src/server/ws/WebSocketDebuggerServer.ts",
							"line": 49,
							"character": 6
						}
					],
					"signatures": [
						{
							"id": 150,
							"name": "send",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Send a message to a given WebSocket connection."
							},
							"parameters": [
								{
									"id": 151,
									"name": "socket",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "WebSocket connection to send the message to."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "undefined"
											},
											{
												"type": "reference",
												"name": "WebSocket"
											}
										]
									}
								},
								{
									"id": 152,
									"name": "message",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Message to send.\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"kind": 512,
					"children": [
						142
					]
				},
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						146,
						145,
						164,
						163
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						147,
						160,
						153,
						157,
						149
					]
				}
			],
			"sources": [
				{
					"fileName": "src/server/ws/WebSocketDebuggerServer.ts",
					"line": 15,
					"character": 36
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"id": 129,
					"name": "WebSocketServer"
				}
			]
		},
		{
			"id": 165,
			"name": "WebSocketDevClientServer",
			"kind": 128,
			"kindString": "Class",
			"flags": {},
			"comment": {
				"shortText": "Class for creating a WebSocket server for communication with React Native clients.\nAll client logs - logs from React Native application - are processed here."
			},
			"children": [
				{
					"id": 166,
					"name": "constructor",
					"kind": 512,
					"kindString": "Constructor",
					"flags": {},
					"signatures": [
						{
							"id": 167,
							"name": "new WebSocketDevClientServer",
							"kind": 16384,
							"kindString": "Constructor signature",
							"flags": {},
							"comment": {
								"shortText": "Create new instance of WebSocketDevClientServer and attach it to the given Fastify instance.\nAny logging information, will be passed through standard `fastify.log` API."
							},
							"parameters": [
								{
									"id": 168,
									"name": "fastify",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Fastify instance to attach the WebSocket server to.\n"
									},
									"type": {
										"type": "reference",
										"id": 443,
										"name": "FastifyDevServer"
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 165,
								"name": "WebSocketDevClientServer"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 131,
								"name": "WebSocketServer.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"id": 130,
						"name": "WebSocketServer.constructor"
					}
				},
				{
					"id": 169,
					"name": "clients",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isPrivate": true
					},
					"sources": [
						{
							"fileName": "src/server/ws/WebSocketDevClientServer.ts",
							"line": 12,
							"character": 17
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "reference",
								"name": "WebSocket"
							}
						],
						"name": "Map"
					},
					"defaultValue": "..."
				},
				{
					"id": 178,
					"name": "fastify",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isProtected": true
					},
					"comment": {
						"shortText": "Fastify instance from which {@link server} will receive upgrade connections."
					},
					"sources": [
						{
							"fileName": "src/server/ws/WebSocketServer.ts",
							"line": 17,
							"character": 19
						}
					],
					"type": {
						"type": "reference",
						"id": 443,
						"name": "FastifyDevServer"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 136,
						"name": "WebSocketServer.fastify"
					}
				},
				{
					"id": 170,
					"name": "nextClientId",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isPrivate": true
					},
					"sources": [
						{
							"fileName": "src/server/ws/WebSocketDevClientServer.ts",
							"line": 13,
							"character": 22
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"defaultValue": "0"
				},
				{
					"id": 177,
					"name": "server",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isProtected": true
					},
					"comment": {
						"shortText": "An instance of the underlying WebSocket server."
					},
					"sources": [
						{
							"fileName": "src/server/ws/WebSocketServer.ts",
							"line": 14,
							"character": 18
						}
					],
					"type": {
						"type": "reference",
						"name": "Server"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 135,
						"name": "WebSocketServer.server"
					}
				},
				{
					"id": 174,
					"name": "onConnection",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "src/server/ws/WebSocketDevClientServer.ts",
							"line": 52,
							"character": 14
						}
					],
					"signatures": [
						{
							"id": 175,
							"name": "onConnection",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Process new WebSocket connection from client application."
							},
							"parameters": [
								{
									"id": 176,
									"name": "socket",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Incoming client's WebSocket connection.\n"
									},
									"type": {
										"type": "reference",
										"name": "WebSocket"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"overwrites": {
								"type": "reference",
								"id": 138,
								"name": "WebSocketServer.onConnection"
							}
						}
					],
					"overwrites": {
						"type": "reference",
						"id": 137,
						"name": "WebSocketServer.onConnection"
					}
				},
				{
					"id": 171,
					"name": "processMessage",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "src/server/ws/WebSocketDevClientServer.ts",
							"line": 30,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 172,
							"name": "processMessage",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Process client message."
							},
							"parameters": [
								{
									"id": 173,
									"name": "message",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Stringified client message.\n"
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"kind": 512,
					"children": [
						166
					]
				},
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						169,
						178,
						170,
						177
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						174,
						171
					]
				}
			],
			"sources": [
				{
					"fileName": "src/server/ws/WebSocketDevClientServer.ts",
					"line": 11,
					"character": 37
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"id": 129,
					"name": "WebSocketServer"
				}
			]
		},
		{
			"id": 190,
			"name": "WebSocketEventsServer",
			"kind": 128,
			"kindString": "Class",
			"flags": {},
			"comment": {
				"shortText": "Class for creating a WebSocket server to process events and reports.",
				"text": "Based on: https://github.com/react-native-community/cli/blob/v4.14.0/packages/cli-server-api/src/websocket/eventsSocketServer.ts\n"
			},
			"children": [
				{
					"id": 192,
					"name": "constructor",
					"kind": 512,
					"kindString": "Constructor",
					"flags": {},
					"signatures": [
						{
							"id": 193,
							"name": "new WebSocketEventsServer",
							"kind": 16384,
							"kindString": "Constructor signature",
							"flags": {},
							"comment": {
								"shortText": "Create new instance of WebSocketHMRServer and attach it to the given Fastify instance.\nAny logging information, will be passed through standard `fastify.log` API."
							},
							"parameters": [
								{
									"id": 194,
									"name": "fastify",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Fastify instance to attach the WebSocket server to."
									},
									"type": {
										"type": "reference",
										"id": 443,
										"name": "FastifyDevServer"
									}
								},
								{
									"id": 195,
									"name": "config",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Configuration object.\n"
									},
									"type": {
										"type": "reference",
										"id": 179,
										"name": "WebSocketEventsServerConfig"
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 190,
								"name": "WebSocketEventsServer"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 131,
								"name": "WebSocketServer.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"id": 130,
						"name": "WebSocketServer.constructor"
					}
				},
				{
					"id": 196,
					"name": "clients",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isPrivate": true
					},
					"sources": [
						{
							"fileName": "src/server/ws/WebSocketEventsServer.ts",
							"line": 44,
							"character": 17
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "reference",
								"name": "WebSocket"
							}
						],
						"name": "Map"
					},
					"defaultValue": "..."
				},
				{
					"id": 211,
					"name": "fastify",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isProtected": true
					},
					"comment": {
						"shortText": "Fastify instance from which {@link server} will receive upgrade connections."
					},
					"sources": [
						{
							"fileName": "src/server/ws/WebSocketServer.ts",
							"line": 17,
							"character": 19
						}
					],
					"type": {
						"type": "reference",
						"id": 443,
						"name": "FastifyDevServer"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 136,
						"name": "WebSocketServer.fastify"
					}
				},
				{
					"id": 197,
					"name": "nextClientId",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isPrivate": true
					},
					"sources": [
						{
							"fileName": "src/server/ws/WebSocketEventsServer.ts",
							"line": 45,
							"character": 22
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"defaultValue": "0"
				},
				{
					"id": 210,
					"name": "server",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isProtected": true
					},
					"comment": {
						"shortText": "An instance of the underlying WebSocket server."
					},
					"sources": [
						{
							"fileName": "src/server/ws/WebSocketServer.ts",
							"line": 14,
							"character": 18
						}
					],
					"type": {
						"type": "reference",
						"name": "Server"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 135,
						"name": "WebSocketServer.server"
					}
				},
				{
					"id": 191,
					"name": "PROTOCOL_VERSION",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isStatic": true,
						"isReadonly": true
					},
					"sources": [
						{
							"fileName": "src/server/ws/WebSocketEventsServer.ts",
							"line": 42,
							"character": 34
						}
					],
					"type": {
						"type": "literal",
						"value": 2
					},
					"defaultValue": "2"
				},
				{
					"id": 204,
					"name": "broadcastEvent",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "src/server/ws/WebSocketEventsServer.ts",
							"line": 138,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 205,
							"name": "broadcastEvent",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Broadcast event to all connected clients."
							},
							"parameters": [
								{
									"id": 206,
									"name": "event",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Event message to broadcast.\n"
									},
									"type": {
										"type": "reference",
										"id": 186,
										"name": "EventMessage"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 207,
					"name": "onConnection",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "src/server/ws/WebSocketEventsServer.ts",
							"line": 166,
							"character": 14
						}
					],
					"signatures": [
						{
							"id": 208,
							"name": "onConnection",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Process new client's WebSocket connection."
							},
							"parameters": [
								{
									"id": 209,
									"name": "socket",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Incoming WebSocket connection.\n"
									},
									"type": {
										"type": "reference",
										"name": "WebSocket"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"overwrites": {
								"type": "reference",
								"id": 138,
								"name": "WebSocketServer.onConnection"
							}
						}
					],
					"overwrites": {
						"type": "reference",
						"id": 137,
						"name": "WebSocketServer.onConnection"
					}
				},
				{
					"id": 198,
					"name": "parseMessage",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "src/server/ws/WebSocketEventsServer.ts",
							"line": 71,
							"character": 14
						}
					],
					"signatures": [
						{
							"id": 199,
							"name": "parseMessage",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Parse received command message from connected client.",
								"returns": "Parsed command or `undefined` if parsing failed.\n"
							},
							"parameters": [
								{
									"id": 200,
									"name": "data",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Stringified command message to parse."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "reference",
										"id": 181,
										"name": "Command"
									}
								]
							}
						}
					]
				},
				{
					"id": 201,
					"name": "serializeMessage",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "src/server/ws/WebSocketEventsServer.ts",
							"line": 97,
							"character": 18
						}
					],
					"signatures": [
						{
							"id": 202,
							"name": "serializeMessage",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Stringify `message` into a format that can be transported as a `string`.",
								"returns": "String representation of a `message` or `undefined` if serialization failed.\n"
							},
							"parameters": [
								{
									"id": 203,
									"name": "message",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Message to serialize."
									},
									"type": {
										"type": "reference",
										"id": 186,
										"name": "EventMessage"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "intrinsic",
										"name": "string"
									}
								]
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"kind": 512,
					"children": [
						192
					]
				},
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						196,
						211,
						197,
						210,
						191
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						204,
						207,
						198,
						201
					]
				}
			],
			"sources": [
				{
					"fileName": "src/server/ws/WebSocketEventsServer.ts",
					"line": 41,
					"character": 34
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"id": 129,
					"name": "WebSocketServer"
				}
			]
		},
		{
			"id": 214,
			"name": "WebSocketHMRServer",
			"kind": 128,
			"kindString": "Class",
			"flags": {},
			"comment": {
				"shortText": "Class for creating a WebSocket server for Hot Module Replacement."
			},
			"children": [
				{
					"id": 215,
					"name": "constructor",
					"kind": 512,
					"kindString": "Constructor",
					"flags": {},
					"signatures": [
						{
							"id": 216,
							"name": "new WebSocketHMRServer",
							"kind": 16384,
							"kindString": "Constructor signature",
							"flags": {},
							"comment": {
								"shortText": "Create new instance of WebSocketHMRServer and attach it to the given Fastify instance.\nAny logging information, will be passed through standard `fastify.log` API."
							},
							"parameters": [
								{
									"id": 217,
									"name": "fastify",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Fastify instance to attach the WebSocket server to.\n"
									},
									"type": {
										"type": "reference",
										"id": 443,
										"name": "FastifyDevServer"
									}
								},
								{
									"id": 218,
									"name": "config",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"id": 212,
										"name": "WebSocketHMRServerConfig"
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 214,
								"name": "WebSocketHMRServer"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 131,
								"name": "WebSocketServer.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"id": 130,
						"name": "WebSocketServer.constructor"
					}
				},
				{
					"id": 220,
					"name": "clients",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isPrivate": true
					},
					"sources": [
						{
							"fileName": "src/server/ws/WebSocketHMRServer.ts",
							"line": 22,
							"character": 17
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "reference",
								"name": "WebSocket"
							}
						],
						"name": "Map"
					},
					"defaultValue": "..."
				},
				{
					"id": 229,
					"name": "fastify",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isProtected": true
					},
					"comment": {
						"shortText": "Fastify instance from which {@link server} will receive upgrade connections."
					},
					"sources": [
						{
							"fileName": "src/server/ws/WebSocketServer.ts",
							"line": 17,
							"character": 19
						}
					],
					"type": {
						"type": "reference",
						"id": 443,
						"name": "FastifyDevServer"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 136,
						"name": "WebSocketServer.fastify"
					}
				},
				{
					"id": 219,
					"name": "latestStats",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isPrivate": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "src/server/ws/WebSocketHMRServer.ts",
							"line": 21,
							"character": 21
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "reference",
								"name": "Stats"
							}
						]
					}
				},
				{
					"id": 221,
					"name": "nextClientId",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isPrivate": true
					},
					"sources": [
						{
							"fileName": "src/server/ws/WebSocketHMRServer.ts",
							"line": 23,
							"character": 22
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"defaultValue": "0"
				},
				{
					"id": 228,
					"name": "server",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isProtected": true
					},
					"comment": {
						"shortText": "An instance of the underlying WebSocket server."
					},
					"sources": [
						{
							"fileName": "src/server/ws/WebSocketServer.ts",
							"line": 14,
							"character": 18
						}
					],
					"type": {
						"type": "reference",
						"name": "Server"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 135,
						"name": "WebSocketServer.server"
					}
				},
				{
					"id": 225,
					"name": "onConnection",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "src/server/ws/WebSocketHMRServer.ts",
							"line": 123,
							"character": 14
						}
					],
					"signatures": [
						{
							"id": 226,
							"name": "onConnection",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Process new WebSocket connection from HMR client."
							},
							"parameters": [
								{
									"id": 227,
									"name": "socket",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Incoming HMR client's WebSocket connection.\n"
									},
									"type": {
										"type": "reference",
										"name": "WebSocket"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"overwrites": {
								"type": "reference",
								"id": 138,
								"name": "WebSocketServer.onConnection"
							}
						}
					],
					"overwrites": {
						"type": "reference",
						"id": 137,
						"name": "WebSocketServer.onConnection"
					}
				},
				{
					"id": 222,
					"name": "sendAction",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "src/server/ws/WebSocketHMRServer.ts",
							"line": 54,
							"character": 12
						}
					],
					"signatures": [
						{
							"id": 223,
							"name": "sendAction",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Send action to all connected HMR clients."
							},
							"parameters": [
								{
									"id": 224,
									"name": "action",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Action to send to the clients.\n"
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "literal",
												"value": "building"
											},
											{
												"type": "literal",
												"value": "built"
											},
											{
												"type": "literal",
												"value": "sync"
											}
										]
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"kind": 512,
					"children": [
						215
					]
				},
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						220,
						229,
						219,
						221,
						228
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						225,
						222
					]
				}
			],
			"sources": [
				{
					"fileName": "src/server/ws/WebSocketHMRServer.ts",
					"line": 20,
					"character": 31
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"id": 129,
					"name": "WebSocketServer"
				}
			]
		},
		{
			"id": 241,
			"name": "WebSocketMessageServer",
			"kind": 128,
			"kindString": "Class",
			"flags": {},
			"comment": {
				"shortText": "Class for creating a WebSocket server and sending messages between development server\nand the React Native applications.",
				"text": "Based on: https://github.com/react-native-community/cli/blob/v4.14.0/packages/cli-server-api/src/websocket/messageSocketServer.ts\n"
			},
			"children": [
				{
					"id": 252,
					"name": "constructor",
					"kind": 512,
					"kindString": "Constructor",
					"flags": {},
					"signatures": [
						{
							"id": 253,
							"name": "new WebSocketMessageServer",
							"kind": 16384,
							"kindString": "Constructor signature",
							"flags": {},
							"comment": {
								"shortText": "Create new instance of WebSocketMessageServer and attach it to the given Fastify instance.\nAny logging information, will be passed through standard `fastify.log` API."
							},
							"parameters": [
								{
									"id": 254,
									"name": "fastify",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Fastify instance to attach the WebSocket server to.\n"
									},
									"type": {
										"type": "reference",
										"id": 443,
										"name": "FastifyDevServer"
									}
								}
							],
							"type": {
								"type": "reference",
								"id": 241,
								"name": "WebSocketMessageServer"
							},
							"inheritedFrom": {
								"type": "reference",
								"id": 131,
								"name": "WebSocketServer.constructor"
							}
						}
					],
					"inheritedFrom": {
						"type": "reference",
						"id": 130,
						"name": "WebSocketServer.constructor"
					}
				},
				{
					"id": 255,
					"name": "clients",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isPrivate": true
					},
					"sources": [
						{
							"fileName": "src/server/ws/WebSocketMessageServer.ts",
							"line": 83,
							"character": 17
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "reference",
								"name": "WebSocketWithUpgradeReq"
							}
						],
						"name": "Map"
					},
					"defaultValue": "..."
				},
				{
					"id": 293,
					"name": "fastify",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isProtected": true
					},
					"comment": {
						"shortText": "Fastify instance from which {@link server} will receive upgrade connections."
					},
					"sources": [
						{
							"fileName": "src/server/ws/WebSocketServer.ts",
							"line": 17,
							"character": 19
						}
					],
					"type": {
						"type": "reference",
						"id": 443,
						"name": "FastifyDevServer"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 136,
						"name": "WebSocketServer.fastify"
					}
				},
				{
					"id": 256,
					"name": "nextClientId",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isPrivate": true
					},
					"sources": [
						{
							"fileName": "src/server/ws/WebSocketMessageServer.ts",
							"line": 84,
							"character": 22
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"defaultValue": "0"
				},
				{
					"id": 292,
					"name": "server",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isProtected": true
					},
					"comment": {
						"shortText": "An instance of the underlying WebSocket server."
					},
					"sources": [
						{
							"fileName": "src/server/ws/WebSocketServer.ts",
							"line": 14,
							"character": 18
						}
					],
					"type": {
						"type": "reference",
						"name": "Server"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 135,
						"name": "WebSocketServer.server"
					}
				},
				{
					"id": 242,
					"name": "PROTOCOL_VERSION",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isStatic": true,
						"isReadonly": true
					},
					"sources": [
						{
							"fileName": "src/server/ws/WebSocketMessageServer.ts",
							"line": 39,
							"character": 34
						}
					],
					"type": {
						"type": "literal",
						"value": 2
					},
					"defaultValue": "2"
				},
				{
					"id": 284,
					"name": "broadcast",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "src/server/ws/WebSocketMessageServer.ts",
							"line": 348,
							"character": 11
						}
					],
					"signatures": [
						{
							"id": 285,
							"name": "broadcast",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Send method broadcast to all connected clients."
							},
							"parameters": [
								{
									"id": 286,
									"name": "method",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Method name to broadcast."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 287,
									"name": "params",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"text": "Method parameters.\n"
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "any"
											}
										],
										"name": "Record"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 269,
					"name": "forwardRequest",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "src/server/ws/WebSocketMessageServer.ts",
							"line": 204,
							"character": 16
						}
					],
					"signatures": [
						{
							"id": 270,
							"name": "forwardRequest",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Send given request `message` to it's designated client's socket based on `message.target`.\nThe target client must be connected, otherwise it will throw an error."
							},
							"parameters": [
								{
									"id": 271,
									"name": "clientId",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Id of the client that requested the forward."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 272,
									"name": "message",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Message to forward.\n"
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 233,
												"name": "ReactNativeMessage"
											}
										],
										"name": "Partial"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 273,
					"name": "forwardResponse",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "src/server/ws/WebSocketMessageServer.ts",
							"line": 235,
							"character": 17
						}
					],
					"signatures": [
						{
							"id": 274,
							"name": "forwardResponse",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Send given response `message` to it's designated client's socket based\non `message.id.clientId`.\nThe target client must be connected, otherwise it will throw an error."
							},
							"parameters": [
								{
									"id": 275,
									"name": "message",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Message to forward.\n"
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 233,
												"name": "ReactNativeMessage"
											}
										],
										"name": "Partial"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 261,
					"name": "getClientSocket",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "src/server/ws/WebSocketMessageServer.ts",
							"line": 140,
							"character": 17
						}
					],
					"signatures": [
						{
							"id": 262,
							"name": "getClientSocket",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Get client's WebSocket connection for given `clientId`.\nThrows if no such client is connected.",
								"returns": "WebSocket connection.\n"
							},
							"parameters": [
								{
									"id": 263,
									"name": "clientId",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Id of the client."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "WebSocketWithUpgradeReq"
							}
						}
					]
				},
				{
					"id": 264,
					"name": "handleError",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "src/server/ws/WebSocketMessageServer.ts",
							"line": 156,
							"character": 13
						}
					],
					"signatures": [
						{
							"id": 265,
							"name": "handleError",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Process error by sending an error message to the client whose message caused the error\nto occur."
							},
							"parameters": [
								{
									"id": 266,
									"name": "clientId",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Id of the client whose message caused an error."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 267,
									"name": "message",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Original message which caused the error."
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 233,
												"name": "ReactNativeMessage"
											}
										],
										"name": "Partial"
									}
								},
								{
									"id": 268,
									"name": "error",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Concrete instance of an error that occurred.\n"
									},
									"type": {
										"type": "reference",
										"name": "Error"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 288,
					"name": "onConnection",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "src/server/ws/WebSocketMessageServer.ts",
							"line": 358,
							"character": 14
						}
					],
					"signatures": [
						{
							"id": 289,
							"name": "onConnection",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Process new client's WebSocket connection."
							},
							"parameters": [
								{
									"id": 290,
									"name": "socket",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Incoming WebSocket connection."
									},
									"type": {
										"type": "reference",
										"name": "WebSocket"
									}
								},
								{
									"id": 291,
									"name": "request",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Upgrade request for the connection.\n"
									},
									"type": {
										"type": "reference",
										"name": "IncomingMessage"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							},
							"overwrites": {
								"type": "reference",
								"id": 138,
								"name": "WebSocketServer.onConnection"
							}
						}
					],
					"overwrites": {
						"type": "reference",
						"id": 137,
						"name": "WebSocketServer.onConnection"
					}
				},
				{
					"id": 257,
					"name": "parseMessage",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "src/server/ws/WebSocketMessageServer.ts",
							"line": 103,
							"character": 14
						}
					],
					"signatures": [
						{
							"id": 258,
							"name": "parseMessage",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Parse stringified message into a {@link ReactNativeMessage}.",
								"returns": "Parsed message or `undefined` if parsing failed.\n"
							},
							"parameters": [
								{
									"id": 259,
									"name": "data",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Stringified message."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 260,
									"name": "binary",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Additional binary data if any."
									},
									"type": {
										"type": "intrinsic",
										"name": "any"
									}
								}
							],
							"type": {
								"type": "union",
								"types": [
									{
										"type": "intrinsic",
										"name": "undefined"
									},
									{
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 233,
												"name": "ReactNativeMessage"
											}
										],
										"name": "Partial"
									}
								]
							}
						}
					]
				},
				{
					"id": 276,
					"name": "processServerRequest",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "src/server/ws/WebSocketMessageServer.ts",
							"line": 258,
							"character": 22
						}
					],
					"signatures": [
						{
							"id": 277,
							"name": "processServerRequest",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Process request message targeted towards this {@link WebSocketMessageServer}\nand send back the results."
							},
							"parameters": [
								{
									"id": 278,
									"name": "clientId",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Id of the client who send the message."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 279,
									"name": "message",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "The message to process by the server.\n"
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 233,
												"name": "ReactNativeMessage"
											}
										],
										"name": "Partial"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 280,
					"name": "sendBroadcast",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"sources": [
						{
							"fileName": "src/server/ws/WebSocketMessageServer.ts",
							"line": 307,
							"character": 15
						}
					],
					"signatures": [
						{
							"id": 281,
							"name": "sendBroadcast",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Broadcast given message to all connected clients."
							},
							"parameters": [
								{
									"id": 282,
									"name": "broadcasterId",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Id of the client who is broadcasting."
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "undefined"
											},
											{
												"type": "intrinsic",
												"name": "string"
											}
										]
									}
								},
								{
									"id": 283,
									"name": "message",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Message to broadcast.\n"
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 233,
												"name": "ReactNativeMessage"
											}
										],
										"name": "Partial"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				},
				{
					"id": 243,
					"name": "isBroadcast",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isStatic": true
					},
					"sources": [
						{
							"fileName": "src/server/ws/WebSocketMessageServer.ts",
							"line": 48,
							"character": 20
						}
					],
					"signatures": [
						{
							"id": 244,
							"name": "isBroadcast",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Check if message is a broadcast request.",
								"returns": "True if message is a broadcast request and should be broadcasted\nwith {@link sendBroadcast}.\n"
							},
							"parameters": [
								{
									"id": 245,
									"name": "message",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Message to check."
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 233,
												"name": "ReactNativeMessage"
											}
										],
										"name": "Partial"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					]
				},
				{
					"id": 246,
					"name": "isRequest",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isStatic": true
					},
					"sources": [
						{
							"fileName": "src/server/ws/WebSocketMessageServer.ts",
							"line": 62,
							"character": 18
						}
					],
					"signatures": [
						{
							"id": 247,
							"name": "isRequest",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Check if message is a method request.",
								"returns": "True if message is a request.\n"
							},
							"parameters": [
								{
									"id": 248,
									"name": "message",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Message to check."
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 233,
												"name": "ReactNativeMessage"
											}
										],
										"name": "Partial"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					]
				},
				{
					"id": 249,
					"name": "isResponse",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isStatic": true
					},
					"sources": [
						{
							"fileName": "src/server/ws/WebSocketMessageServer.ts",
							"line": 74,
							"character": 19
						}
					],
					"signatures": [
						{
							"id": 250,
							"name": "isResponse",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Check if message is a response with results of performing some request.",
								"returns": "True if message is a response.\n"
							},
							"parameters": [
								{
									"id": 251,
									"name": "message",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Message to check."
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"id": 233,
												"name": "ReactNativeMessage"
											}
										],
										"name": "Partial"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "boolean"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"kind": 512,
					"children": [
						252
					]
				},
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						255,
						293,
						256,
						292,
						242
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						284,
						269,
						273,
						261,
						264,
						288,
						257,
						276,
						280,
						243,
						246,
						249
					]
				}
			],
			"sources": [
				{
					"fileName": "src/server/ws/WebSocketMessageServer.ts",
					"line": 38,
					"character": 35
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"id": 129,
					"name": "WebSocketServer"
				}
			]
		},
		{
			"id": 129,
			"name": "WebSocketServer",
			"kind": 128,
			"kindString": "Class",
			"flags": {
				"isAbstract": true
			},
			"comment": {
				"shortText": "Abstract class for providing common logic (eg routing) for all WebSocket servers."
			},
			"children": [
				{
					"id": 130,
					"name": "constructor",
					"kind": 512,
					"kindString": "Constructor",
					"flags": {},
					"signatures": [
						{
							"id": 131,
							"name": "new WebSocketServer",
							"kind": 16384,
							"kindString": "Constructor signature",
							"flags": {},
							"comment": {
								"shortText": "Create a new instance of the WebSocketServer.\nAny logging information, will be passed through standard `fastify.log` API."
							},
							"parameters": [
								{
									"id": 132,
									"name": "fastify",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Fastify instance to which the WebSocket will be attached to."
									},
									"type": {
										"type": "reference",
										"id": 443,
										"name": "FastifyDevServer"
									}
								},
								{
									"id": 133,
									"name": "path",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Path on which this WebSocketServer will be accepting connections."
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 134,
									"name": "wssOptions",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "WebSocket Server options.\n"
									},
									"type": {
										"type": "reference",
										"typeArguments": [
											{
												"type": "reference",
												"name": "ServerOptions"
											},
											{
												"type": "union",
												"types": [
													{
														"type": "literal",
														"value": "backlog"
													},
													{
														"type": "literal",
														"value": "verifyClient"
													},
													{
														"type": "literal",
														"value": "handleProtocols"
													},
													{
														"type": "literal",
														"value": "clientTracking"
													},
													{
														"type": "literal",
														"value": "perMessageDeflate"
													},
													{
														"type": "literal",
														"value": "maxPayload"
													}
												]
											}
										],
										"name": "Pick"
									},
									"defaultValue": "..."
								}
							],
							"type": {
								"type": "reference",
								"id": 129,
								"name": "WebSocketServer"
							}
						}
					]
				},
				{
					"id": 136,
					"name": "fastify",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isProtected": true
					},
					"comment": {
						"shortText": "Fastify instance from which {@link server} will receive upgrade connections."
					},
					"sources": [
						{
							"fileName": "src/server/ws/WebSocketServer.ts",
							"line": 17,
							"character": 19
						}
					],
					"type": {
						"type": "reference",
						"id": 443,
						"name": "FastifyDevServer"
					}
				},
				{
					"id": 135,
					"name": "server",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isProtected": true
					},
					"comment": {
						"shortText": "An instance of the underlying WebSocket server."
					},
					"sources": [
						{
							"fileName": "src/server/ws/WebSocketServer.ts",
							"line": 14,
							"character": 18
						}
					],
					"type": {
						"type": "reference",
						"name": "Server"
					}
				},
				{
					"id": 137,
					"name": "onConnection",
					"kind": 2048,
					"kindString": "Method",
					"flags": {
						"isAbstract": true
					},
					"sources": [
						{
							"fileName": "src/server/ws/WebSocketServer.ts",
							"line": 75,
							"character": 23
						}
					],
					"signatures": [
						{
							"id": 138,
							"name": "onConnection",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Process incoming WebSocket connection."
							},
							"parameters": [
								{
									"id": 139,
									"name": "socket",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Incoming WebSocket connection."
									},
									"type": {
										"type": "reference",
										"name": "WebSocket"
									}
								},
								{
									"id": 140,
									"name": "request",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Upgrade request for the connection.\n"
									},
									"type": {
										"type": "reference",
										"name": "IncomingMessage"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"kind": 512,
					"children": [
						130
					]
				},
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						136,
						135
					]
				},
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						137
					]
				}
			],
			"sources": [
				{
					"fileName": "src/server/ws/WebSocketServer.ts",
					"line": 12,
					"character": 37
				}
			],
			"extendedBy": [
				{
					"type": "reference",
					"id": 141,
					"name": "WebSocketDebuggerServer"
				},
				{
					"type": "reference",
					"id": 165,
					"name": "WebSocketDevClientServer"
				},
				{
					"type": "reference",
					"id": 190,
					"name": "WebSocketEventsServer"
				},
				{
					"type": "reference",
					"id": 214,
					"name": "WebSocketHMRServer"
				},
				{
					"type": "reference",
					"id": 241,
					"name": "WebSocketMessageServer"
				}
			]
		},
		{
			"id": 294,
			"name": "BaseDevServerConfig",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"shortText": "{@link BaseDevServer} configuration options."
			},
			"children": [
				{
					"id": 298,
					"name": "cert",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Path to certificate when running server on HTTPS."
					},
					"sources": [
						{
							"fileName": "src/types.ts",
							"line": 82,
							"character": 6
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "string"
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 521,
						"name": "DevServerOptions.cert"
					}
				},
				{
					"id": 300,
					"name": "context",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "Context in which all resolution happens. Usually it's project root directory."
					},
					"sources": [
						{
							"fileName": "src/types.ts",
							"line": 86,
							"character": 9
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 523,
						"name": "DevServerOptions.context"
					}
				},
				{
					"id": 295,
					"name": "host",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Hostname under which to run the development server. Defaults to `localhost`."
					},
					"sources": [
						{
							"fileName": "src/types.ts",
							"line": 76,
							"character": 6
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "string"
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 518,
						"name": "DevServerOptions.host"
					}
				},
				{
					"id": 297,
					"name": "https",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Whether to run server on HTTPS instead of HTTP."
					},
					"sources": [
						{
							"fileName": "src/types.ts",
							"line": 80,
							"character": 7
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "boolean"
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 520,
						"name": "DevServerOptions.https"
					}
				},
				{
					"id": 299,
					"name": "key",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Path to certificate key when running server on HTTPS."
					},
					"sources": [
						{
							"fileName": "src/types.ts",
							"line": 84,
							"character": 5
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "string"
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 522,
						"name": "DevServerOptions.key"
					}
				},
				{
					"id": 301,
					"name": "platform",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "Target application platform."
					},
					"sources": [
						{
							"fileName": "src/types.ts",
							"line": 88,
							"character": 10
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 524,
						"name": "DevServerOptions.platform"
					}
				},
				{
					"id": 296,
					"name": "port",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "Port under which to run the development server. See: {@link DEFAULT_PORT}."
					},
					"sources": [
						{
							"fileName": "src/types.ts",
							"line": 78,
							"character": 6
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 519,
						"name": "DevServerOptions.port"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						298,
						300,
						295,
						297,
						299,
						301,
						296
					]
				}
			],
			"sources": [
				{
					"fileName": "src/server/BaseDevServer.ts",
					"line": 18,
					"character": 36
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"id": 517,
					"name": "DevServerOptions"
				}
			],
			"extendedBy": [
				{
					"type": "reference",
					"id": 317,
					"name": "DevServerConfig"
				},
				{
					"type": "reference",
					"id": 347,
					"name": "DevServerProxyConfig"
				}
			]
		},
		{
			"id": 497,
			"name": "BundleArguments",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"shortText": "CLI arguments passed from React Native CLI when running bundle command.",
				"tags": [
					{
						"tag": "internal",
						"text": "\n"
					}
				]
			},
			"children": [
				{
					"id": 498,
					"name": "assetsDest",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "src/types.ts",
							"line": 44,
							"character": 12
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "string"
							}
						]
					}
				},
				{
					"id": 502,
					"name": "bundleOutput",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "src/types.ts",
							"line": 48,
							"character": 14
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 501,
					"name": "dev",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "src/types.ts",
							"line": 47,
							"character": 5
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 499,
					"name": "entryFile",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "src/types.ts",
							"line": 45,
							"character": 11
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 500,
					"name": "minify",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "src/types.ts",
							"line": 46,
							"character": 8
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "boolean"
							}
						]
					}
				},
				{
					"id": 504,
					"name": "platform",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "Target application platform."
					},
					"sources": [
						{
							"fileName": "src/types.ts",
							"line": 31,
							"character": 10
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 494,
						"name": "CommonArguments.platform"
					}
				},
				{
					"id": 505,
					"name": "resetCache",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Whether to clean any persistent cache."
					},
					"sources": [
						{
							"fileName": "src/types.ts",
							"line": 33,
							"character": 12
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "boolean"
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 495,
						"name": "CommonArguments.resetCache"
					}
				},
				{
					"id": 503,
					"name": "sourcemapOutput",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "src/types.ts",
							"line": 50,
							"character": 17
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "string"
							}
						]
					}
				},
				{
					"id": 506,
					"name": "verbose",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Whether to log additional debug messages."
					},
					"sources": [
						{
							"fileName": "src/types.ts",
							"line": 35,
							"character": 9
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "boolean"
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 496,
						"name": "CommonArguments.verbose"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						498,
						502,
						501,
						499,
						500,
						504,
						505,
						503,
						506
					]
				}
			],
			"sources": [
				{
					"fileName": "src/types.ts",
					"line": 43,
					"character": 32
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"id": 493,
					"name": "CommonArguments"
				}
			]
		},
		{
			"id": 525,
			"name": "CliOptions",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"shortText": "Holds all information used by {@link parseCliOptions}.",
				"tags": [
					{
						"tag": "internal",
						"text": "\n"
					}
				]
			},
			"children": [
				{
					"id": 532,
					"name": "arguments",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "src/types.ts",
							"line": 103,
							"character": 11
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "reflection",
								"declaration": {
									"id": 533,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"children": [
										{
											"id": 534,
											"name": "bundle",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "src/types.ts",
													"line": 105,
													"character": 14
												}
											],
											"type": {
												"type": "reference",
												"id": 497,
												"name": "BundleArguments"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												534
											]
										}
									]
								}
							},
							{
								"type": "reflection",
								"declaration": {
									"id": 535,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"children": [
										{
											"id": 536,
											"name": "start",
											"kind": 1024,
											"kindString": "Property",
											"flags": {},
											"sources": [
												{
													"fileName": "src/types.ts",
													"line": 108,
													"character": 13
												}
											],
											"type": {
												"type": "reference",
												"id": 507,
												"name": "StartArguments"
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												536
											]
										}
									]
								}
							}
						]
					}
				},
				{
					"id": 531,
					"name": "command",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "src/types.ts",
							"line": 102,
							"character": 9
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": "bundle"
							},
							{
								"type": "literal",
								"value": "start"
							}
						]
					}
				},
				{
					"id": 526,
					"name": "config",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "src/types.ts",
							"line": 97,
							"character": 8
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 527,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"children": [
								{
									"id": 529,
									"name": "reactNativePath",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "src/types.ts",
											"line": 99,
											"character": 19
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 528,
									"name": "root",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "src/types.ts",
											"line": 98,
											"character": 8
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								},
								{
									"id": 530,
									"name": "webpackConfigPath",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "src/types.ts",
											"line": 100,
											"character": 21
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										529,
										528,
										530
									]
								}
							]
						}
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						532,
						531,
						526
					]
				}
			],
			"sources": [
				{
					"fileName": "src/types.ts",
					"line": 96,
					"character": 27
				}
			]
		},
		{
			"id": 407,
			"name": "CodeFrame",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"shortText": "Represents [@babel/core-frame](https://babeljs.io/docs/en/babel-code-frame)."
			},
			"children": [
				{
					"id": 408,
					"name": "content",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "src/server/Symbolicator.ts",
							"line": 39,
							"character": 9
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 413,
					"name": "fileName",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "src/server/Symbolicator.ts",
							"line": 44,
							"character": 10
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 409,
					"name": "location",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "src/server/Symbolicator.ts",
							"line": 40,
							"character": 10
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 410,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"children": [
								{
									"id": 412,
									"name": "column",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "src/server/Symbolicator.ts",
											"line": 42,
											"character": 10
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								},
								{
									"id": 411,
									"name": "row",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"sources": [
										{
											"fileName": "src/server/Symbolicator.ts",
											"line": 41,
											"character": 7
										}
									],
									"type": {
										"type": "intrinsic",
										"name": "number"
									}
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										412,
										411
									]
								}
							]
						}
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						408,
						413,
						409
					]
				}
			],
			"sources": [
				{
					"fileName": "src/server/Symbolicator.ts",
					"line": 38,
					"character": 26
				}
			]
		},
		{
			"id": 181,
			"name": "Command",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"shortText": "Represents a command that connected clients can send to the {@link WebSocketEventsServer}."
			},
			"children": [
				{
					"id": 184,
					"name": "command",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "src/server/ws/WebSocketEventsServer.ts",
							"line": 21,
							"character": 9
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 185,
					"name": "params",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "src/server/ws/WebSocketEventsServer.ts",
							"line": 22,
							"character": 8
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "any"
					}
				},
				{
					"id": 183,
					"name": "type",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "src/server/ws/WebSocketEventsServer.ts",
							"line": 20,
							"character": 6
						}
					],
					"type": {
						"type": "literal",
						"value": "command"
					}
				},
				{
					"id": 182,
					"name": "version",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "src/server/ws/WebSocketEventsServer.ts",
							"line": 19,
							"character": 9
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						184,
						185,
						183,
						182
					]
				}
			],
			"sources": [
				{
					"fileName": "src/server/ws/WebSocketEventsServer.ts",
					"line": 18,
					"character": 24
				}
			]
		},
		{
			"id": 493,
			"name": "CommonArguments",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"shortText": "Common CLI arguments that are used across all commands.",
				"tags": [
					{
						"tag": "internal",
						"text": "\n"
					}
				]
			},
			"children": [
				{
					"id": 494,
					"name": "platform",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "Target application platform."
					},
					"sources": [
						{
							"fileName": "src/types.ts",
							"line": 31,
							"character": 10
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 495,
					"name": "resetCache",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Whether to clean any persistent cache."
					},
					"sources": [
						{
							"fileName": "src/types.ts",
							"line": 33,
							"character": 12
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "boolean"
							}
						]
					}
				},
				{
					"id": 496,
					"name": "verbose",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Whether to log additional debug messages."
					},
					"sources": [
						{
							"fileName": "src/types.ts",
							"line": 35,
							"character": 9
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "boolean"
							}
						]
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						494,
						495,
						496
					]
				}
			],
			"sources": [
				{
					"fileName": "src/types.ts",
					"line": 29,
					"character": 32
				}
			],
			"extendedBy": [
				{
					"type": "reference",
					"id": 497,
					"name": "BundleArguments"
				},
				{
					"type": "reference",
					"id": 507,
					"name": "StartArguments"
				}
			]
		},
		{
			"id": 355,
			"name": "CompilerWorker",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"shortText": "Represents a process that runs Webpack compilation and {@link DevServer}\nvia {@link DevServerPlugin}."
			},
			"children": [
				{
					"id": 357,
					"name": "port",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "Port on which {@link DevServer} is running."
					},
					"sources": [
						{
							"fileName": "src/server/DevServerProxy.ts",
							"line": 33,
							"character": 6
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 356,
					"name": "process",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "Spawned process with the Webpack compilation."
					},
					"sources": [
						{
							"fileName": "src/server/DevServerProxy.ts",
							"line": 31,
							"character": 9
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "string"
							}
						],
						"name": "ExecaChildProcess"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						357,
						356
					]
				}
			],
			"sources": [
				{
					"fileName": "src/server/DevServerProxy.ts",
					"line": 29,
					"character": 31
				}
			]
		},
		{
			"id": 317,
			"name": "DevServerConfig",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"shortText": "{@link DevServer} configuration options."
			},
			"children": [
				{
					"id": 321,
					"name": "cert",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Path to certificate when running server on HTTPS."
					},
					"sources": [
						{
							"fileName": "src/types.ts",
							"line": 82,
							"character": 6
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "string"
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 298,
						"name": "BaseDevServerConfig.cert"
					}
				},
				{
					"id": 323,
					"name": "context",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "Context in which all resolution happens. Usually it's project root directory."
					},
					"sources": [
						{
							"fileName": "src/types.ts",
							"line": 86,
							"character": 9
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 300,
						"name": "BaseDevServerConfig.context"
					}
				},
				{
					"id": 318,
					"name": "host",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Hostname under which to run the development server. Defaults to `localhost`."
					},
					"sources": [
						{
							"fileName": "src/types.ts",
							"line": 76,
							"character": 6
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "string"
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 295,
						"name": "BaseDevServerConfig.host"
					}
				},
				{
					"id": 320,
					"name": "https",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Whether to run server on HTTPS instead of HTTP."
					},
					"sources": [
						{
							"fileName": "src/types.ts",
							"line": 80,
							"character": 7
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "boolean"
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 297,
						"name": "BaseDevServerConfig.https"
					}
				},
				{
					"id": 322,
					"name": "key",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Path to certificate key when running server on HTTPS."
					},
					"sources": [
						{
							"fileName": "src/types.ts",
							"line": 84,
							"character": 5
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "string"
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 299,
						"name": "BaseDevServerConfig.key"
					}
				},
				{
					"id": 324,
					"name": "platform",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "Target application platform."
					},
					"sources": [
						{
							"fileName": "src/types.ts",
							"line": 88,
							"character": 10
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 301,
						"name": "BaseDevServerConfig.platform"
					}
				},
				{
					"id": 319,
					"name": "port",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "Port under which to run the development server. See: {@link DEFAULT_PORT}."
					},
					"sources": [
						{
							"fileName": "src/types.ts",
							"line": 78,
							"character": 6
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 296,
						"name": "BaseDevServerConfig.port"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						321,
						323,
						318,
						320,
						322,
						324,
						319
					]
				}
			],
			"sources": [
				{
					"fileName": "src/server/DevServer.ts",
					"line": 18,
					"character": 32
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"id": 294,
					"name": "BaseDevServerConfig"
				}
			],
			"extendedBy": [
				{
					"type": "reference",
					"id": 1,
					"name": "DevServerPluginConfig"
				}
			]
		},
		{
			"id": 446,
			"name": "DevServerLoggerOptions",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"shortText": "Development server logging configuration.\nApart from 'stream' all other fields come from Fastify types."
			},
			"children": [
				{
					"id": 482,
					"name": "genReqId",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/fastify/types/logger.d.ts",
							"line": 142,
							"character": 10
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "reflection",
								"declaration": {
									"id": 483,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"signatures": [
										{
											"id": 484,
											"name": "__type",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"typeParameter": [
												{
													"id": 485,
													"name": "RequestGeneric",
													"kind": 131072,
													"kindString": "Type parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"name": "RequestGenericInterface"
													},
													"default": {
														"type": "reference",
														"name": "RequestGenericInterface"
													}
												}
											],
											"parameters": [
												{
													"id": 486,
													"name": "req",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "reference",
														"typeArguments": [
															{
																"type": "reference",
																"name": "RequestGeneric"
															},
															{
																"type": "reference",
																"name": "Server"
															},
															{
																"type": "reference",
																"name": "IncomingMessage"
															}
														],
														"name": "FastifyRequest"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "string"
											}
										}
									]
								}
							}
						]
					}
				},
				{
					"id": 481,
					"name": "level",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/fastify/types/logger.d.ts",
							"line": 141,
							"character": 7
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "string"
							}
						]
					}
				},
				{
					"id": 487,
					"name": "prettyPrint",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/fastify/types/logger.d.ts",
							"line": 143,
							"character": 13
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "boolean"
							},
							{
								"type": "reference",
								"name": "PrettyOptions"
							}
						]
					}
				},
				{
					"id": 448,
					"name": "serializers",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isExternal": true,
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "node_modules/fastify/types/logger.d.ts",
							"line": 120,
							"character": 13
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "reflection",
								"declaration": {
									"id": 449,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"children": [
										{
											"id": 463,
											"name": "err",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExternal": true,
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "node_modules/fastify/types/logger.d.ts",
													"line": 130,
													"character": 7
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "reflection",
														"declaration": {
															"id": 464,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"signatures": [
																{
																	"id": 465,
																	"name": "__type",
																	"kind": 4096,
																	"kindString": "Call signature",
																	"flags": {},
																	"parameters": [
																		{
																			"id": 466,
																			"name": "err",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"type": {
																				"type": "reference",
																				"name": "FastifyError"
																			}
																		}
																	],
																	"type": {
																		"type": "reflection",
																		"declaration": {
																			"id": 467,
																			"name": "__type",
																			"kind": 65536,
																			"kindString": "Type literal",
																			"flags": {},
																			"children": [
																				{
																					"id": 469,
																					"name": "message",
																					"kind": 1024,
																					"kindString": "Property",
																					"flags": {
																						"isExternal": true
																					},
																					"sources": [
																						{
																							"fileName": "node_modules/fastify/types/logger.d.ts",
																							"line": 132,
																							"character": 13
																						}
																					],
																					"type": {
																						"type": "intrinsic",
																						"name": "string"
																					}
																				},
																				{
																					"id": 470,
																					"name": "stack",
																					"kind": 1024,
																					"kindString": "Property",
																					"flags": {
																						"isExternal": true
																					},
																					"sources": [
																						{
																							"fileName": "node_modules/fastify/types/logger.d.ts",
																							"line": 133,
																							"character": 11
																						}
																					],
																					"type": {
																						"type": "intrinsic",
																						"name": "string"
																					}
																				},
																				{
																					"id": 468,
																					"name": "type",
																					"kind": 1024,
																					"kindString": "Property",
																					"flags": {
																						"isExternal": true
																					},
																					"sources": [
																						{
																							"fileName": "node_modules/fastify/types/logger.d.ts",
																							"line": 131,
																							"character": 10
																						}
																					],
																					"type": {
																						"type": "intrinsic",
																						"name": "string"
																					}
																				}
																			],
																			"groups": [
																				{
																					"title": "Properties",
																					"kind": 1024,
																					"children": [
																						469,
																						470,
																						468
																					]
																				}
																			],
																			"indexSignature": {
																				"id": 471,
																				"name": "__index",
																				"kind": 8192,
																				"kindString": "Index signature",
																				"flags": {},
																				"parameters": [
																					{
																						"id": 472,
																						"name": "key",
																						"kind": 32768,
																						"flags": {},
																						"type": {
																							"type": "intrinsic",
																							"name": "string"
																						}
																					}
																				],
																				"type": {
																					"type": "intrinsic",
																					"name": "unknown"
																				}
																			}
																		}
																	}
																}
															]
														}
													}
												]
											}
										},
										{
											"id": 450,
											"name": "req",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExternal": true,
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "node_modules/fastify/types/logger.d.ts",
													"line": 121,
													"character": 7
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "reflection",
														"declaration": {
															"id": 451,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"signatures": [
																{
																	"id": 452,
																	"name": "__type",
																	"kind": 4096,
																	"kindString": "Call signature",
																	"flags": {},
																	"parameters": [
																		{
																			"id": 453,
																			"name": "req",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"type": {
																				"type": "reference",
																				"name": "IncomingMessage"
																			}
																		}
																	],
																	"type": {
																		"type": "reflection",
																		"declaration": {
																			"id": 454,
																			"name": "__type",
																			"kind": 65536,
																			"kindString": "Type literal",
																			"flags": {},
																			"children": [
																				{
																					"id": 458,
																					"name": "hostname",
																					"kind": 1024,
																					"kindString": "Property",
																					"flags": {
																						"isExternal": true,
																						"isOptional": true
																					},
																					"sources": [
																						{
																							"fileName": "node_modules/fastify/types/logger.d.ts",
																							"line": 125,
																							"character": 14
																						}
																					],
																					"type": {
																						"type": "union",
																						"types": [
																							{
																								"type": "intrinsic",
																								"name": "undefined"
																							},
																							{
																								"type": "intrinsic",
																								"name": "string"
																							}
																						]
																					}
																				},
																				{
																					"id": 455,
																					"name": "method",
																					"kind": 1024,
																					"kindString": "Property",
																					"flags": {
																						"isExternal": true,
																						"isOptional": true
																					},
																					"sources": [
																						{
																							"fileName": "node_modules/fastify/types/logger.d.ts",
																							"line": 122,
																							"character": 12
																						}
																					],
																					"type": {
																						"type": "union",
																						"types": [
																							{
																								"type": "intrinsic",
																								"name": "undefined"
																							},
																							{
																								"type": "intrinsic",
																								"name": "string"
																							}
																						]
																					}
																				},
																				{
																					"id": 459,
																					"name": "remoteAddress",
																					"kind": 1024,
																					"kindString": "Property",
																					"flags": {
																						"isExternal": true,
																						"isOptional": true
																					},
																					"sources": [
																						{
																							"fileName": "node_modules/fastify/types/logger.d.ts",
																							"line": 126,
																							"character": 19
																						}
																					],
																					"type": {
																						"type": "union",
																						"types": [
																							{
																								"type": "intrinsic",
																								"name": "undefined"
																							},
																							{
																								"type": "intrinsic",
																								"name": "string"
																							}
																						]
																					}
																				},
																				{
																					"id": 460,
																					"name": "remotePort",
																					"kind": 1024,
																					"kindString": "Property",
																					"flags": {
																						"isExternal": true,
																						"isOptional": true
																					},
																					"sources": [
																						{
																							"fileName": "node_modules/fastify/types/logger.d.ts",
																							"line": 127,
																							"character": 16
																						}
																					],
																					"type": {
																						"type": "union",
																						"types": [
																							{
																								"type": "intrinsic",
																								"name": "undefined"
																							},
																							{
																								"type": "intrinsic",
																								"name": "number"
																							}
																						]
																					}
																				},
																				{
																					"id": 456,
																					"name": "url",
																					"kind": 1024,
																					"kindString": "Property",
																					"flags": {
																						"isExternal": true,
																						"isOptional": true
																					},
																					"sources": [
																						{
																							"fileName": "node_modules/fastify/types/logger.d.ts",
																							"line": 123,
																							"character": 9
																						}
																					],
																					"type": {
																						"type": "union",
																						"types": [
																							{
																								"type": "intrinsic",
																								"name": "undefined"
																							},
																							{
																								"type": "intrinsic",
																								"name": "string"
																							}
																						]
																					}
																				},
																				{
																					"id": 457,
																					"name": "version",
																					"kind": 1024,
																					"kindString": "Property",
																					"flags": {
																						"isExternal": true,
																						"isOptional": true
																					},
																					"sources": [
																						{
																							"fileName": "node_modules/fastify/types/logger.d.ts",
																							"line": 124,
																							"character": 13
																						}
																					],
																					"type": {
																						"type": "union",
																						"types": [
																							{
																								"type": "intrinsic",
																								"name": "undefined"
																							},
																							{
																								"type": "intrinsic",
																								"name": "string"
																							}
																						]
																					}
																				}
																			],
																			"groups": [
																				{
																					"title": "Properties",
																					"kind": 1024,
																					"children": [
																						458,
																						455,
																						459,
																						460,
																						456,
																						457
																					]
																				}
																			],
																			"indexSignature": {
																				"id": 461,
																				"name": "__index",
																				"kind": 8192,
																				"kindString": "Index signature",
																				"flags": {},
																				"parameters": [
																					{
																						"id": 462,
																						"name": "key",
																						"kind": 32768,
																						"flags": {},
																						"type": {
																							"type": "intrinsic",
																							"name": "string"
																						}
																					}
																				],
																				"type": {
																					"type": "intrinsic",
																					"name": "unknown"
																				}
																			}
																		}
																	}
																}
															]
														}
													}
												]
											}
										},
										{
											"id": 473,
											"name": "res",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isExternal": true,
												"isOptional": true
											},
											"sources": [
												{
													"fileName": "node_modules/fastify/types/logger.d.ts",
													"line": 136,
													"character": 7
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "reflection",
														"declaration": {
															"id": 474,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"signatures": [
																{
																	"id": 475,
																	"name": "__type",
																	"kind": 4096,
																	"kindString": "Call signature",
																	"flags": {},
																	"parameters": [
																		{
																			"id": 476,
																			"name": "res",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"type": {
																				"type": "reference",
																				"name": "ServerResponse"
																			}
																		}
																	],
																	"type": {
																		"type": "reflection",
																		"declaration": {
																			"id": 477,
																			"name": "__type",
																			"kind": 65536,
																			"kindString": "Type literal",
																			"flags": {},
																			"children": [
																				{
																					"id": 478,
																					"name": "statusCode",
																					"kind": 1024,
																					"kindString": "Property",
																					"flags": {
																						"isExternal": true
																					},
																					"sources": [
																						{
																							"fileName": "node_modules/fastify/types/logger.d.ts",
																							"line": 137,
																							"character": 16
																						}
																					],
																					"type": {
																						"type": "union",
																						"types": [
																							{
																								"type": "intrinsic",
																								"name": "string"
																							},
																							{
																								"type": "intrinsic",
																								"name": "number"
																							}
																						]
																					}
																				}
																			],
																			"groups": [
																				{
																					"title": "Properties",
																					"kind": 1024,
																					"children": [
																						478
																					]
																				}
																			],
																			"indexSignature": {
																				"id": 479,
																				"name": "__index",
																				"kind": 8192,
																				"kindString": "Index signature",
																				"flags": {},
																				"parameters": [
																					{
																						"id": 480,
																						"name": "key",
																						"kind": 32768,
																						"flags": {},
																						"type": {
																							"type": "intrinsic",
																							"name": "string"
																						}
																					}
																				],
																				"type": {
																					"type": "intrinsic",
																					"name": "unknown"
																				}
																			}
																		}
																	}
																}
															]
														}
													}
												]
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												463,
												450,
												473
											]
										}
									]
								}
							}
						]
					}
				},
				{
					"id": 447,
					"name": "stream",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Stream to write logs to."
					},
					"sources": [
						{
							"fileName": "src/server/types.ts",
							"line": 42,
							"character": 8
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "reference",
								"name": "Writable"
							}
						]
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						482,
						481,
						487,
						448,
						447
					]
				}
			],
			"sources": [
				{
					"fileName": "src/server/types.ts",
					"line": 40,
					"character": 39
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"name": "FastifyLoggerOptions"
				}
			]
		},
		{
			"id": 517,
			"name": "DevServerOptions",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"shortText": "Development server configuration options.",
				"text": "Used by {@link DevServerPlugin}, {@link BaseDevServer}, {@link DevServer} and {@link DevServerProxy}.\n"
			},
			"children": [
				{
					"id": 521,
					"name": "cert",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Path to certificate when running server on HTTPS."
					},
					"sources": [
						{
							"fileName": "src/types.ts",
							"line": 82,
							"character": 6
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "string"
							}
						]
					}
				},
				{
					"id": 523,
					"name": "context",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "Context in which all resolution happens. Usually it's project root directory."
					},
					"sources": [
						{
							"fileName": "src/types.ts",
							"line": 86,
							"character": 9
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 518,
					"name": "host",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Hostname under which to run the development server. Defaults to `localhost`."
					},
					"sources": [
						{
							"fileName": "src/types.ts",
							"line": 76,
							"character": 6
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "string"
							}
						]
					}
				},
				{
					"id": 520,
					"name": "https",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Whether to run server on HTTPS instead of HTTP."
					},
					"sources": [
						{
							"fileName": "src/types.ts",
							"line": 80,
							"character": 7
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "boolean"
							}
						]
					}
				},
				{
					"id": 522,
					"name": "key",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Path to certificate key when running server on HTTPS."
					},
					"sources": [
						{
							"fileName": "src/types.ts",
							"line": 84,
							"character": 5
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "string"
							}
						]
					}
				},
				{
					"id": 524,
					"name": "platform",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "Target application platform."
					},
					"sources": [
						{
							"fileName": "src/types.ts",
							"line": 88,
							"character": 10
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 519,
					"name": "port",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "Port under which to run the development server. See: {@link DEFAULT_PORT}."
					},
					"sources": [
						{
							"fileName": "src/types.ts",
							"line": 78,
							"character": 6
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						521,
						523,
						518,
						520,
						522,
						524,
						519
					]
				}
			],
			"sources": [
				{
					"fileName": "src/types.ts",
					"line": 74,
					"character": 33
				}
			],
			"extendedBy": [
				{
					"type": "reference",
					"id": 294,
					"name": "BaseDevServerConfig"
				}
			]
		},
		{
			"id": 1,
			"name": "DevServerPluginConfig",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"shortText": "{@link DevServerPlugin} configuration options."
			},
			"children": [
				{
					"id": 6,
					"name": "cert",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Path to certificate when running server on HTTPS."
					},
					"sources": [
						{
							"fileName": "src/types.ts",
							"line": 82,
							"character": 6
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "string"
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 321,
						"name": "DevServerConfig.cert"
					}
				},
				{
					"id": 8,
					"name": "context",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "Context in which all resolution happens. Usually it's project root directory."
					},
					"sources": [
						{
							"fileName": "src/types.ts",
							"line": 86,
							"character": 9
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 323,
						"name": "DevServerConfig.context"
					}
				},
				{
					"id": 2,
					"name": "hmr",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Whether Hot Module Replacement / React Refresh should be enabled. Defaults to `true`."
					},
					"sources": [
						{
							"fileName": "src/webpack/plugins/DevServerPlugin/DevServerPlugin.ts",
							"line": 13,
							"character": 5
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "boolean"
							}
						]
					}
				},
				{
					"id": 3,
					"name": "host",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Hostname under which to run the development server. Defaults to `localhost`."
					},
					"sources": [
						{
							"fileName": "src/types.ts",
							"line": 76,
							"character": 6
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "string"
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 318,
						"name": "DevServerConfig.host"
					}
				},
				{
					"id": 5,
					"name": "https",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Whether to run server on HTTPS instead of HTTP."
					},
					"sources": [
						{
							"fileName": "src/types.ts",
							"line": 80,
							"character": 7
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "boolean"
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 320,
						"name": "DevServerConfig.https"
					}
				},
				{
					"id": 7,
					"name": "key",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Path to certificate key when running server on HTTPS."
					},
					"sources": [
						{
							"fileName": "src/types.ts",
							"line": 84,
							"character": 5
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "string"
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 322,
						"name": "DevServerConfig.key"
					}
				},
				{
					"id": 9,
					"name": "platform",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "Target application platform."
					},
					"sources": [
						{
							"fileName": "src/types.ts",
							"line": 88,
							"character": 10
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 324,
						"name": "DevServerConfig.platform"
					}
				},
				{
					"id": 4,
					"name": "port",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "Port under which to run the development server. See: {@link DEFAULT_PORT}."
					},
					"sources": [
						{
							"fileName": "src/types.ts",
							"line": 78,
							"character": 6
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 319,
						"name": "DevServerConfig.port"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						6,
						8,
						2,
						3,
						5,
						7,
						9,
						4
					]
				}
			],
			"sources": [
				{
					"fileName": "src/webpack/plugins/DevServerPlugin/DevServerPlugin.ts",
					"line": 9,
					"character": 38
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"id": 317,
					"name": "DevServerConfig"
				}
			]
		},
		{
			"id": 347,
			"name": "DevServerProxyConfig",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"shortText": "{@link DevServerProxy} configuration options."
			},
			"children": [
				{
					"id": 351,
					"name": "cert",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Path to certificate when running server on HTTPS."
					},
					"sources": [
						{
							"fileName": "src/types.ts",
							"line": 82,
							"character": 6
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "string"
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 298,
						"name": "BaseDevServerConfig.cert"
					}
				},
				{
					"id": 353,
					"name": "context",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "Context in which all resolution happens. Usually it's project root directory."
					},
					"sources": [
						{
							"fileName": "src/types.ts",
							"line": 86,
							"character": 9
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 300,
						"name": "BaseDevServerConfig.context"
					}
				},
				{
					"id": 348,
					"name": "host",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Hostname under which to run the development server. Defaults to `localhost`."
					},
					"sources": [
						{
							"fileName": "src/types.ts",
							"line": 76,
							"character": 6
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "string"
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 295,
						"name": "BaseDevServerConfig.host"
					}
				},
				{
					"id": 350,
					"name": "https",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Whether to run server on HTTPS instead of HTTP."
					},
					"sources": [
						{
							"fileName": "src/types.ts",
							"line": 80,
							"character": 7
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "boolean"
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 297,
						"name": "BaseDevServerConfig.https"
					}
				},
				{
					"id": 352,
					"name": "key",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Path to certificate key when running server on HTTPS."
					},
					"sources": [
						{
							"fileName": "src/types.ts",
							"line": 84,
							"character": 5
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "string"
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 299,
						"name": "BaseDevServerConfig.key"
					}
				},
				{
					"id": 354,
					"name": "platform",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "Target application platform."
					},
					"sources": [
						{
							"fileName": "src/types.ts",
							"line": 88,
							"character": 10
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 301,
						"name": "BaseDevServerConfig.platform"
					}
				},
				{
					"id": 349,
					"name": "port",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "Port under which to run the development server. See: {@link DEFAULT_PORT}."
					},
					"sources": [
						{
							"fileName": "src/types.ts",
							"line": 78,
							"character": 6
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 296,
						"name": "BaseDevServerConfig.port"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						351,
						353,
						348,
						350,
						352,
						354,
						349
					]
				}
			],
			"sources": [
				{
					"fileName": "src/server/DevServerProxy.ts",
					"line": 23,
					"character": 37
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"id": 294,
					"name": "BaseDevServerConfig"
				}
			]
		},
		{
			"id": 186,
			"name": "EventMessage",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"shortText": "Represents an event message."
			},
			"children": [
				{
					"id": 189,
					"name": "data",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "src/server/ws/WebSocketEventsServer.ts",
							"line": 31,
							"character": 6
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "any"
					}
				},
				{
					"id": 187,
					"name": "error",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "src/server/ws/WebSocketEventsServer.ts",
							"line": 29,
							"character": 7
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "reference",
								"name": "Error"
							}
						]
					}
				},
				{
					"id": 188,
					"name": "type",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "src/server/ws/WebSocketEventsServer.ts",
							"line": 30,
							"character": 6
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "string"
							}
						]
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						189,
						187,
						188
					]
				}
			],
			"sources": [
				{
					"fileName": "src/server/ws/WebSocketEventsServer.ts",
					"line": 28,
					"character": 29
				}
			]
		},
		{
			"id": 95,
			"name": "FallbackWebpackOptions",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"shortText": "{@link WebpackOptions} for fallback used by {@link parseCliOptions}.\nAll fields expect for `platform` are optional. Check {@link DEFAULT_FALLBACK}\nfor fallback defaults."
			},
			"children": [
				{
					"id": 104,
					"name": "assetsOutputPath",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Directory where all assets (eg: images, video, audio) will be saved."
					},
					"sources": [
						{
							"fileName": "src/types.ts",
							"line": 139,
							"character": 18
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "string"
							}
						]
					}
				},
				{
					"id": 99,
					"name": "context",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Context in which all resolution happens. Usually it's project root directory."
					},
					"sources": [
						{
							"fileName": "src/types.ts",
							"line": 126,
							"character": 9
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "string"
							}
						]
					}
				},
				{
					"id": 98,
					"name": "dev",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Inferred from {@link mode}. `true` is `mode` is `development`."
					},
					"sources": [
						{
							"fileName": "src/types.ts",
							"line": 122,
							"character": 5
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "boolean"
							}
						]
					}
				},
				{
					"id": 107,
					"name": "devServer",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Development server configuration options.\nUsed by {@link DevServerPlugin}, {@link BaseDevServer}, {@link DevServer} and {@link DevServerProxy}.",
						"text": "If `undefined`, then development server should not be run.\n"
					},
					"sources": [
						{
							"fileName": "src/types.ts",
							"line": 150,
							"character": 11
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "reference",
								"id": 517,
								"name": "DevServerOptions"
							}
						]
					}
				},
				{
					"id": 100,
					"name": "entry",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Input filename - entry point of the bundle."
					},
					"sources": [
						{
							"fileName": "src/types.ts",
							"line": 128,
							"character": 7
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "string"
							}
						]
					}
				},
				{
					"id": 105,
					"name": "minimize",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Whether to minimize the final bundle."
					},
					"sources": [
						{
							"fileName": "src/types.ts",
							"line": 141,
							"character": 10
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "boolean"
							}
						]
					}
				},
				{
					"id": 97,
					"name": "mode",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Compilation mode."
					},
					"sources": [
						{
							"fileName": "src/types.ts",
							"line": 120,
							"character": 6
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "literal",
								"value": "production"
							},
							{
								"type": "literal",
								"value": "development"
							}
						]
					}
				},
				{
					"id": 102,
					"name": "outputFilename",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Bundle output filename - name under which built bundle will be saved."
					},
					"sources": [
						{
							"fileName": "src/types.ts",
							"line": 132,
							"character": 16
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "string"
							}
						]
					}
				},
				{
					"id": 101,
					"name": "outputPath",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Bundle output path - directory where built bundle will be saved."
					},
					"sources": [
						{
							"fileName": "src/types.ts",
							"line": 130,
							"character": 12
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "string"
							}
						]
					}
				},
				{
					"id": 96,
					"name": "platform",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "Target application platform."
					},
					"sources": [
						{
							"fileName": "src/webpack/utils/parseCliOptions.ts",
							"line": 18,
							"character": 10
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 106,
					"name": "reactNativePath",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Path to React Native dependency. Usually points to `node_modules/react-native`."
					},
					"sources": [
						{
							"fileName": "src/types.ts",
							"line": 143,
							"character": 17
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "string"
							}
						]
					}
				},
				{
					"id": 103,
					"name": "sourcemapFilename",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Source map filename - name under which generated Source Map will be saved.\nThe output directory for the Source Map is the same as {@link outputPath}."
					},
					"sources": [
						{
							"fileName": "src/types.ts",
							"line": 137,
							"character": 19
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "string"
							}
						]
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						104,
						99,
						98,
						107,
						100,
						105,
						97,
						102,
						101,
						96,
						106,
						103
					]
				}
			],
			"sources": [
				{
					"fileName": "src/webpack/utils/parseCliOptions.ts",
					"line": 16,
					"character": 39
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"id": 94,
					"name": "OptionalWebpackOptions"
				}
			]
		},
		{
			"id": 563,
			"name": "HMRMessage",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"shortText": "Represent Hot Module Replacement Update message.\nUsed by {@link WebSocketHMRServer} and `WebpackHMRClient`.",
				"tags": [
					{
						"tag": "internal",
						"text": "\n"
					}
				]
			},
			"children": [
				{
					"id": 564,
					"name": "action",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "src/types.ts",
							"line": 190,
							"character": 8
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": "building"
							},
							{
								"type": "literal",
								"value": "built"
							},
							{
								"type": "literal",
								"value": "sync"
							}
						]
					}
				},
				{
					"id": 565,
					"name": "body",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "src/types.ts",
							"line": 191,
							"character": 6
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": null
							},
							{
								"type": "reference",
								"id": 556,
								"name": "HMRMessageBody"
							}
						]
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						564,
						565
					]
				}
			],
			"sources": [
				{
					"fileName": "src/types.ts",
					"line": 189,
					"character": 27
				}
			]
		},
		{
			"id": 556,
			"name": "HMRMessageBody",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"shortText": "Represent Hot Module Replacement Update body.\nUsed by {@link WebSocketHMRServer} and `WebpackHMRClient`.",
				"tags": [
					{
						"tag": "internal",
						"text": "\n"
					}
				]
			},
			"children": [
				{
					"id": 561,
					"name": "errors",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "src/types.ts",
							"line": 179,
							"character": 8
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "StatsError"
								}
							}
						]
					}
				},
				{
					"id": 559,
					"name": "hash",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "src/types.ts",
							"line": 177,
							"character": 6
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 562,
					"name": "modules",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "src/types.ts",
							"line": 180,
							"character": 9
						}
					],
					"type": {
						"type": "reference",
						"typeArguments": [
							{
								"type": "intrinsic",
								"name": "string"
							},
							{
								"type": "intrinsic",
								"name": "string"
							}
						],
						"name": "Record"
					}
				},
				{
					"id": 557,
					"name": "name",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "src/types.ts",
							"line": 175,
							"character": 6
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 558,
					"name": "time",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "src/types.ts",
							"line": 176,
							"character": 6
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 560,
					"name": "warnings",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "src/types.ts",
							"line": 178,
							"character": 10
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "array",
								"elementType": {
									"type": "reference",
									"name": "StatsError"
								}
							}
						]
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						561,
						559,
						562,
						557,
						558,
						560
					]
				}
			],
			"sources": [
				{
					"fileName": "src/types.ts",
					"line": 174,
					"character": 31
				}
			]
		},
		{
			"id": 87,
			"name": "InitializationEntriesOptions",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"shortText": "{@link getInitializationEntries} options."
			},
			"children": [
				{
					"id": 89,
					"name": "hmr",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Whether Hot Module Replacement entry should be enabled. Defaults to `true`."
					},
					"sources": [
						{
							"fileName": "src/webpack/utils/getInitializationEntries.ts",
							"line": 15,
							"character": 5
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "boolean"
							}
						]
					}
				},
				{
					"id": 88,
					"name": "initializeCoreLocation",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Absolute location to JS file with initialization logic for React Native.\nUseful if you want to built for out-of-tree platforms."
					},
					"sources": [
						{
							"fileName": "src/webpack/utils/getInitializationEntries.ts",
							"line": 11,
							"character": 24
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "string"
							}
						]
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						89,
						88
					]
				}
			],
			"sources": [
				{
					"fileName": "src/webpack/utils/getInitializationEntries.ts",
					"line": 6,
					"character": 45
				}
			]
		},
		{
			"id": 396,
			"name": "InputStackFrame",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"shortText": "React Native stack frame used as input when processing by {@link Symbolicator}."
			},
			"children": [
				{
					"id": 399,
					"name": "column",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "src/server/Symbolicator.ts",
							"line": 16,
							"character": 8
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": null
							},
							{
								"type": "intrinsic",
								"name": "number"
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 393,
						"name": "ReactNativeStackFrame.column"
					}
				},
				{
					"id": 397,
					"name": "file",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "src/server/Symbolicator.ts",
							"line": 25,
							"character": 6
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"overwrites": {
						"type": "reference",
						"id": 394,
						"name": "ReactNativeStackFrame.file"
					}
				},
				{
					"id": 398,
					"name": "lineNumber",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "src/server/Symbolicator.ts",
							"line": 15,
							"character": 12
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": null
							},
							{
								"type": "intrinsic",
								"name": "number"
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 392,
						"name": "ReactNativeStackFrame.lineNumber"
					}
				},
				{
					"id": 400,
					"name": "methodName",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "src/server/Symbolicator.ts",
							"line": 18,
							"character": 12
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 395,
						"name": "ReactNativeStackFrame.methodName"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						399,
						397,
						398,
						400
					]
				}
			],
			"sources": [
				{
					"fileName": "src/server/Symbolicator.ts",
					"line": 24,
					"character": 32
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"id": 391,
					"name": "ReactNativeStackFrame"
				}
			],
			"extendedBy": [
				{
					"type": "reference",
					"id": 401,
					"name": "StackFrame"
				}
			]
		},
		{
			"id": 37,
			"name": "JavaScriptLooseModePluginConfig",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"shortText": "{@link JavaScriptLooseModePlugin} configuration options."
			},
			"children": [
				{
					"id": 38,
					"name": "include",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "Pattern for matching modules that should be run in loose mode:\n- `boolean` - enables or disables loose mode for all the modules within a bundle,\n- `string[]` - enables loose mode for only modules specified within the array,\n- `RegExp[]` - enables loose mode for only modules matching any of the regex within the array,\n- `(filename: string) => boolean` - enables loose mode for only modules, for which the function returns `true`."
					},
					"sources": [
						{
							"fileName": "src/webpack/plugins/JavaScriptLooseModePlugin.ts",
							"line": 16,
							"character": 9
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "boolean"
							},
							{
								"type": "array",
								"elementType": {
									"type": "union",
									"types": [
										{
											"type": "intrinsic",
											"name": "string"
										},
										{
											"type": "reference",
											"name": "RegExp"
										}
									]
								}
							},
							{
								"type": "reflection",
								"declaration": {
									"id": 39,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"signatures": [
										{
											"id": 40,
											"name": "__type",
											"kind": 4096,
											"kindString": "Call signature",
											"flags": {},
											"parameters": [
												{
													"id": 41,
													"name": "filename",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "intrinsic",
														"name": "string"
													}
												}
											],
											"type": {
												"type": "intrinsic",
												"name": "boolean"
											}
										}
									]
								}
							}
						]
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						38
					]
				}
			],
			"sources": [
				{
					"fileName": "src/webpack/plugins/JavaScriptLooseModePlugin.ts",
					"line": 8,
					"character": 48
				}
			]
		},
		{
			"id": 551,
			"name": "LogEntry",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"shortText": "Represent log message with all necessary data.",
				"tags": [
					{
						"tag": "internal",
						"text": "\n"
					}
				]
			},
			"children": [
				{
					"id": 554,
					"name": "issuer",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "src/types.ts",
							"line": 164,
							"character": 8
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 555,
					"name": "message",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "src/types.ts",
							"line": 165,
							"character": 9
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "intrinsic",
							"name": "any"
						}
					}
				},
				{
					"id": 552,
					"name": "timestamp",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "src/types.ts",
							"line": 162,
							"character": 11
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "number"
					}
				},
				{
					"id": 553,
					"name": "type",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "src/types.ts",
							"line": 163,
							"character": 6
						}
					],
					"type": {
						"type": "reference",
						"id": 550,
						"name": "LogType"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						554,
						555,
						552,
						553
					]
				}
			],
			"sources": [
				{
					"fileName": "src/types.ts",
					"line": 161,
					"character": 25
				}
			]
		},
		{
			"id": 54,
			"name": "LoggerPluginConfig",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"shortText": "{@link LoggerPlugin} configuration options."
			},
			"children": [
				{
					"id": 56,
					"name": "devServer",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Whether development server is running/enabled."
					},
					"sources": [
						{
							"fileName": "src/webpack/plugins/LoggerPlugin.ts",
							"line": 14,
							"character": 11
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "boolean"
							}
						]
					}
				},
				{
					"id": 57,
					"name": "output",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Logging output config."
					},
					"sources": [
						{
							"fileName": "src/webpack/plugins/LoggerPlugin.ts",
							"line": 16,
							"character": 8
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "reflection",
								"declaration": {
									"id": 58,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"children": [
										{
											"id": 59,
											"name": "console",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"shortText": "Whether to log to console."
											},
											"sources": [
												{
													"fileName": "src/webpack/plugins/LoggerPlugin.ts",
													"line": 18,
													"character": 11
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "boolean"
													}
												]
											}
										},
										{
											"id": 60,
											"name": "file",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"shortText": "Absolute path to file to log messages to."
											},
											"sources": [
												{
													"fileName": "src/webpack/plugins/LoggerPlugin.ts",
													"line": 20,
													"character": 8
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "intrinsic",
														"name": "string"
													}
												]
											}
										},
										{
											"id": 61,
											"name": "listener",
											"kind": 1024,
											"kindString": "Property",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"shortText": "Listener for new messages."
											},
											"sources": [
												{
													"fileName": "src/webpack/plugins/LoggerPlugin.ts",
													"line": 22,
													"character": 12
												}
											],
											"type": {
												"type": "union",
												"types": [
													{
														"type": "intrinsic",
														"name": "undefined"
													},
													{
														"type": "reflection",
														"declaration": {
															"id": 62,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"signatures": [
																{
																	"id": 63,
																	"name": "__type",
																	"kind": 4096,
																	"kindString": "Call signature",
																	"flags": {},
																	"parameters": [
																		{
																			"id": 64,
																			"name": "logEntry",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"type": {
																				"type": "reference",
																				"id": 551,
																				"name": "LogEntry"
																			}
																		}
																	],
																	"type": {
																		"type": "intrinsic",
																		"name": "void"
																	}
																}
															]
														}
													}
												]
											}
										}
									],
									"groups": [
										{
											"title": "Properties",
											"kind": 1024,
											"children": [
												59,
												60,
												61
											]
										}
									]
								}
							}
						]
					}
				},
				{
					"id": 55,
					"name": "platform",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "Target application platform."
					},
					"sources": [
						{
							"fileName": "src/webpack/plugins/LoggerPlugin.ts",
							"line": 12,
							"character": 10
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						56,
						57,
						55
					]
				}
			],
			"sources": [
				{
					"fileName": "src/webpack/plugins/LoggerPlugin.ts",
					"line": 10,
					"character": 35
				}
			]
		},
		{
			"id": 108,
			"name": "ParseCliOptionsConfig",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"shortText": "{@link parseCliOptions} configuration options."
			},
			"children": [
				{
					"id": 109,
					"name": "fallback",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "Fallback values to use if some or all the values are not provided by React Native CLI.\nCommon use of the fallback is when running with Webpack CLI.\nCompared to {@link WebpackOptions}, only `platform` is required. Check {@link DEFAULT_FALLBACK}\nfor fallback defaults."
					},
					"sources": [
						{
							"fileName": "src/webpack/utils/parseCliOptions.ts",
							"line": 31,
							"character": 10
						}
					],
					"type": {
						"type": "reference",
						"id": 95,
						"name": "FallbackWebpackOptions"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						109
					]
				}
			],
			"sources": [
				{
					"fileName": "src/webpack/utils/parseCliOptions.ts",
					"line": 24,
					"character": 38
				}
			]
		},
		{
			"id": 17,
			"name": "ReactNativeAssetsPluginConfig",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"shortText": "{@link ReactNativeAssetsPlugin} configuration options."
			},
			"children": [
				{
					"id": 20,
					"name": "assetsOutputPath",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Directory where all assets (eg: images, video, audio) should be saved.\nIf not provided, all assets will be saved in the same directory as {@link outputPath}."
					},
					"sources": [
						{
							"fileName": "src/webpack/plugins/ReactNativeAssetsPlugin/ReactNativeAssetsPlugin.ts",
							"line": 25,
							"character": 18
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "string"
							}
						]
					}
				},
				{
					"id": 21,
					"name": "bundleToFile",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Whether the build produces static bundle saved to file or\nthe bundle will be updated multiple times and resides in memory.",
						"text": "__When development server is running, `bundleToFile` should be set to `false`.__\n"
					},
					"sources": [
						{
							"fileName": "src/webpack/plugins/ReactNativeAssetsPlugin/ReactNativeAssetsPlugin.ts",
							"line": 32,
							"character": 14
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "boolean"
							}
						]
					}
				},
				{
					"id": 18,
					"name": "context",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "Context in which all resolution happens. Usually it's project root directory."
					},
					"sources": [
						{
							"fileName": "src/webpack/plugins/ReactNativeAssetsPlugin/ReactNativeAssetsPlugin.ts",
							"line": 15,
							"character": 9
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 19,
					"name": "outputPath",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Bundle output path - directory where built bundle will be saved.\nIf not provided it will be inferred from Webpack configuration."
					},
					"sources": [
						{
							"fileName": "src/webpack/plugins/ReactNativeAssetsPlugin/ReactNativeAssetsPlugin.ts",
							"line": 20,
							"character": 12
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "string"
							}
						]
					}
				},
				{
					"id": 23,
					"name": "platform",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "Target application platform."
					},
					"sources": [
						{
							"fileName": "src/webpack/plugins/ReactNativeAssetsPlugin/ReactNativeAssetResolver.ts",
							"line": 17,
							"character": 10
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 22,
					"name": "test",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Override default test RegExp. If the asset matches the `test` RegExp, it will be process\nby the custom React Native asset resolver. Otherwise, the resolution will process normally and\nthe asset will be handled by Webpack."
					},
					"sources": [
						{
							"fileName": "src/webpack/plugins/ReactNativeAssetsPlugin/ReactNativeAssetResolver.ts",
							"line": 15,
							"character": 6
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "reference",
								"name": "RegExp"
							}
						]
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						20,
						21,
						18,
						19,
						23,
						22
					]
				}
			],
			"sources": [
				{
					"fileName": "src/webpack/plugins/ReactNativeAssetsPlugin/ReactNativeAssetsPlugin.ts",
					"line": 12,
					"character": 46
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"name": "ReactNativeAssetResolverConfig"
				}
			]
		},
		{
			"id": 230,
			"name": "ReactNativeIdObject",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"shortText": "Holds {@link ReactNativeMessage} `id` data."
			},
			"children": [
				{
					"id": 232,
					"name": "clientId",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "src/server/ws/WebSocketMessageServer.ts",
							"line": 12,
							"character": 10
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 231,
					"name": "requestId",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "src/server/ws/WebSocketMessageServer.ts",
							"line": 11,
							"character": 11
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						232,
						231
					]
				}
			],
			"sources": [
				{
					"fileName": "src/server/ws/WebSocketMessageServer.ts",
					"line": 10,
					"character": 36
				}
			]
		},
		{
			"id": 233,
			"name": "ReactNativeMessage",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"shortText": "Message representation used by {@link WebSocketMessageServer}."
			},
			"children": [
				{
					"id": 239,
					"name": "error",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "src/server/ws/WebSocketMessageServer.ts",
							"line": 24,
							"character": 7
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "reference",
								"name": "Error"
							}
						]
					}
				},
				{
					"id": 235,
					"name": "id",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "src/server/ws/WebSocketMessageServer.ts",
							"line": 20,
							"character": 4
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "reference",
								"id": 230,
								"name": "ReactNativeIdObject"
							}
						]
					}
				},
				{
					"id": 236,
					"name": "method",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "src/server/ws/WebSocketMessageServer.ts",
							"line": 21,
							"character": 8
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "string"
							}
						]
					}
				},
				{
					"id": 240,
					"name": "params",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "src/server/ws/WebSocketMessageServer.ts",
							"line": 25,
							"character": 8
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "reference",
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "string"
									},
									{
										"type": "intrinsic",
										"name": "any"
									}
								],
								"name": "Record"
							}
						]
					}
				},
				{
					"id": 238,
					"name": "result",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "src/server/ws/WebSocketMessageServer.ts",
							"line": 23,
							"character": 8
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "any"
					}
				},
				{
					"id": 237,
					"name": "target",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "src/server/ws/WebSocketMessageServer.ts",
							"line": 22,
							"character": 8
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 234,
					"name": "version",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "src/server/ws/WebSocketMessageServer.ts",
							"line": 19,
							"character": 9
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "string"
							}
						]
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						239,
						235,
						236,
						240,
						238,
						237,
						234
					]
				}
			],
			"sources": [
				{
					"fileName": "src/server/ws/WebSocketMessageServer.ts",
					"line": 18,
					"character": 35
				}
			]
		},
		{
			"id": 391,
			"name": "ReactNativeStackFrame",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"shortText": "Raw React Native stack frame."
			},
			"children": [
				{
					"id": 393,
					"name": "column",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "src/server/Symbolicator.ts",
							"line": 16,
							"character": 8
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": null
							},
							{
								"type": "intrinsic",
								"name": "number"
							}
						]
					}
				},
				{
					"id": 394,
					"name": "file",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "src/server/Symbolicator.ts",
							"line": 17,
							"character": 6
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": null
							},
							{
								"type": "intrinsic",
								"name": "string"
							}
						]
					}
				},
				{
					"id": 392,
					"name": "lineNumber",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "src/server/Symbolicator.ts",
							"line": 15,
							"character": 12
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": null
							},
							{
								"type": "intrinsic",
								"name": "number"
							}
						]
					}
				},
				{
					"id": 395,
					"name": "methodName",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "src/server/Symbolicator.ts",
							"line": 18,
							"character": 12
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						393,
						394,
						392,
						395
					]
				}
			],
			"sources": [
				{
					"fileName": "src/server/Symbolicator.ts",
					"line": 14,
					"character": 38
				}
			],
			"extendedBy": [
				{
					"type": "reference",
					"id": 396,
					"name": "InputStackFrame"
				}
			]
		},
		{
			"id": 566,
			"name": "ReporterConfig",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"shortText": "{@link Reporter} configuration options."
			},
			"children": [
				{
					"id": 567,
					"name": "verbose",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Whether to log additional debug messages."
					},
					"sources": [
						{
							"fileName": "src/Reporter.ts",
							"line": 41,
							"character": 9
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "boolean"
							}
						]
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						567
					]
				}
			],
			"sources": [
				{
					"fileName": "src/Reporter.ts",
					"line": 39,
					"character": 31
				}
			]
		},
		{
			"id": 401,
			"name": "StackFrame",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"shortText": "Final symbolicated stack frame."
			},
			"children": [
				{
					"id": 402,
					"name": "collapse",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "src/server/Symbolicator.ts",
							"line": 32,
							"character": 10
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 405,
					"name": "column",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "src/server/Symbolicator.ts",
							"line": 16,
							"character": 8
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": null
							},
							{
								"type": "intrinsic",
								"name": "number"
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 399,
						"name": "InputStackFrame.column"
					}
				},
				{
					"id": 403,
					"name": "file",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "src/server/Symbolicator.ts",
							"line": 25,
							"character": 6
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 397,
						"name": "InputStackFrame.file"
					}
				},
				{
					"id": 404,
					"name": "lineNumber",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "src/server/Symbolicator.ts",
							"line": 15,
							"character": 12
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": null
							},
							{
								"type": "intrinsic",
								"name": "number"
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 398,
						"name": "InputStackFrame.lineNumber"
					}
				},
				{
					"id": 406,
					"name": "methodName",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "src/server/Symbolicator.ts",
							"line": 18,
							"character": 12
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 400,
						"name": "InputStackFrame.methodName"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						402,
						405,
						403,
						404,
						406
					]
				}
			],
			"sources": [
				{
					"fileName": "src/server/Symbolicator.ts",
					"line": 31,
					"character": 27
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"id": 396,
					"name": "InputStackFrame"
				}
			]
		},
		{
			"id": 507,
			"name": "StartArguments",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"shortText": "CLI arguments passed from React Native CLI when running start command.",
				"tags": [
					{
						"tag": "internal",
						"text": "\n"
					}
				]
			},
			"children": [
				{
					"id": 508,
					"name": "cert",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "src/types.ts",
							"line": 61,
							"character": 6
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "string"
							}
						]
					}
				},
				{
					"id": 509,
					"name": "host",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "src/types.ts",
							"line": 62,
							"character": 6
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "string"
							}
						]
					}
				},
				{
					"id": 510,
					"name": "https",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "src/types.ts",
							"line": 63,
							"character": 7
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "boolean"
							}
						]
					}
				},
				{
					"id": 513,
					"name": "interactive",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "src/types.ts",
							"line": 66,
							"character": 13
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "boolean"
							}
						]
					}
				},
				{
					"id": 511,
					"name": "key",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "src/types.ts",
							"line": 64,
							"character": 5
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "string"
							}
						]
					}
				},
				{
					"id": 514,
					"name": "platform",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "Target application platform."
					},
					"sources": [
						{
							"fileName": "src/types.ts",
							"line": 31,
							"character": 10
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 494,
						"name": "CommonArguments.platform"
					}
				},
				{
					"id": 512,
					"name": "port",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"sources": [
						{
							"fileName": "src/types.ts",
							"line": 65,
							"character": 6
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "number"
							}
						]
					}
				},
				{
					"id": 515,
					"name": "resetCache",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Whether to clean any persistent cache."
					},
					"sources": [
						{
							"fileName": "src/types.ts",
							"line": 33,
							"character": 12
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "boolean"
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 495,
						"name": "CommonArguments.resetCache"
					}
				},
				{
					"id": 516,
					"name": "verbose",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Whether to log additional debug messages."
					},
					"sources": [
						{
							"fileName": "src/types.ts",
							"line": 35,
							"character": 9
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "boolean"
							}
						]
					},
					"inheritedFrom": {
						"type": "reference",
						"id": 496,
						"name": "CommonArguments.verbose"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						508,
						509,
						510,
						513,
						511,
						514,
						512,
						515,
						516
					]
				}
			],
			"sources": [
				{
					"fileName": "src/types.ts",
					"line": 60,
					"character": 31
				}
			],
			"extendedTypes": [
				{
					"type": "reference",
					"id": 493,
					"name": "CommonArguments"
				}
			]
		},
		{
			"id": 414,
			"name": "SymbolicatorResults",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"shortText": "Represents results of running {@link process} method on {@link Symbolicator} instance."
			},
			"children": [
				{
					"id": 415,
					"name": "codeFrame",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "src/server/Symbolicator.ts",
							"line": 51,
							"character": 11
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": null
							},
							{
								"type": "reference",
								"id": 407,
								"name": "CodeFrame"
							}
						]
					}
				},
				{
					"id": 416,
					"name": "stack",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"sources": [
						{
							"fileName": "src/server/Symbolicator.ts",
							"line": 52,
							"character": 7
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "reference",
							"id": 401,
							"name": "StackFrame"
						}
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						415,
						416
					]
				}
			],
			"sources": [
				{
					"fileName": "src/server/Symbolicator.ts",
					"line": 50,
					"character": 36
				}
			]
		},
		{
			"id": 179,
			"name": "WebSocketEventsServerConfig",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"shortText": "{@link WebSocketEventsServer} configuration options."
			},
			"children": [
				{
					"id": 180,
					"name": "webSocketMessageServer",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "Instance of a {@link WebSocketMessageServer} which can be used for broadcasting."
					},
					"sources": [
						{
							"fileName": "src/server/ws/WebSocketEventsServer.ts",
							"line": 12,
							"character": 24
						}
					],
					"type": {
						"type": "reference",
						"id": 241,
						"name": "WebSocketMessageServer"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						180
					]
				}
			],
			"sources": [
				{
					"fileName": "src/server/ws/WebSocketEventsServer.ts",
					"line": 10,
					"character": 44
				}
			]
		},
		{
			"id": 212,
			"name": "WebSocketHMRServerConfig",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"shortText": "{@link WebSocketHMRServer} configuration options."
			},
			"children": [
				{
					"id": 213,
					"name": "compiler",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "Instance of Webpack compiler"
					},
					"sources": [
						{
							"fileName": "src/server/ws/WebSocketHMRServer.ts",
							"line": 12,
							"character": 10
						}
					],
					"type": {
						"type": "reference",
						"name": "Compiler"
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						213
					]
				}
			],
			"sources": [
				{
					"fileName": "src/server/ws/WebSocketHMRServer.ts",
					"line": 10,
					"character": 41
				}
			]
		},
		{
			"id": 537,
			"name": "WebpackOptions",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"shortText": "Represents all relevant options that are needed to create a valid Webpack configuration\nand configure all plugins.",
				"text": "This is the return type of {@link parseCliOptions}.\n"
			},
			"children": [
				{
					"id": 546,
					"name": "assetsOutputPath",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Directory where all assets (eg: images, video, audio) will be saved."
					},
					"sources": [
						{
							"fileName": "src/types.ts",
							"line": 139,
							"character": 18
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "string"
							}
						]
					}
				},
				{
					"id": 541,
					"name": "context",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "Context in which all resolution happens. Usually it's project root directory."
					},
					"sources": [
						{
							"fileName": "src/types.ts",
							"line": 126,
							"character": 9
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 539,
					"name": "dev",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "Inferred from {@link mode}. `true` is `mode` is `development`."
					},
					"sources": [
						{
							"fileName": "src/types.ts",
							"line": 122,
							"character": 5
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 549,
					"name": "devServer",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Development server configuration options.\nUsed by {@link DevServerPlugin}, {@link BaseDevServer}, {@link DevServer} and {@link DevServerProxy}.",
						"text": "If `undefined`, then development server should not be run.\n"
					},
					"sources": [
						{
							"fileName": "src/types.ts",
							"line": 150,
							"character": 11
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "reference",
								"id": 517,
								"name": "DevServerOptions"
							}
						]
					}
				},
				{
					"id": 542,
					"name": "entry",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "Input filename - entry point of the bundle."
					},
					"sources": [
						{
							"fileName": "src/types.ts",
							"line": 128,
							"character": 7
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 547,
					"name": "minimize",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "Whether to minimize the final bundle."
					},
					"sources": [
						{
							"fileName": "src/types.ts",
							"line": 141,
							"character": 10
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "boolean"
					}
				},
				{
					"id": 538,
					"name": "mode",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "Compilation mode."
					},
					"sources": [
						{
							"fileName": "src/types.ts",
							"line": 120,
							"character": 6
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "literal",
								"value": "production"
							},
							{
								"type": "literal",
								"value": "development"
							}
						]
					}
				},
				{
					"id": 544,
					"name": "outputFilename",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "Bundle output filename - name under which built bundle will be saved."
					},
					"sources": [
						{
							"fileName": "src/types.ts",
							"line": 132,
							"character": 16
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 543,
					"name": "outputPath",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "Bundle output path - directory where built bundle will be saved."
					},
					"sources": [
						{
							"fileName": "src/types.ts",
							"line": 130,
							"character": 12
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 540,
					"name": "platform",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "Target application platform."
					},
					"sources": [
						{
							"fileName": "src/types.ts",
							"line": 124,
							"character": 10
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 548,
					"name": "reactNativePath",
					"kind": 1024,
					"kindString": "Property",
					"flags": {},
					"comment": {
						"shortText": "Path to React Native dependency. Usually points to `node_modules/react-native`."
					},
					"sources": [
						{
							"fileName": "src/types.ts",
							"line": 143,
							"character": 17
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 545,
					"name": "sourcemapFilename",
					"kind": 1024,
					"kindString": "Property",
					"flags": {
						"isOptional": true
					},
					"comment": {
						"shortText": "Source map filename - name under which generated Source Map will be saved.\nThe output directory for the Source Map is the same as {@link outputPath}."
					},
					"sources": [
						{
							"fileName": "src/types.ts",
							"line": 137,
							"character": 19
						}
					],
					"type": {
						"type": "union",
						"types": [
							{
								"type": "intrinsic",
								"name": "undefined"
							},
							{
								"type": "intrinsic",
								"name": "string"
							}
						]
					}
				}
			],
			"groups": [
				{
					"title": "Properties",
					"kind": 1024,
					"children": [
						546,
						541,
						539,
						549,
						542,
						547,
						538,
						544,
						543,
						540,
						548,
						545
					]
				}
			],
			"sources": [
				{
					"fileName": "src/types.ts",
					"line": 118,
					"character": 31
				}
			]
		},
		{
			"id": 489,
			"name": "WebpackPlugin",
			"kind": 256,
			"kindString": "Interface",
			"flags": {},
			"comment": {
				"shortText": "Interface that all Webpack plugins should implement."
			},
			"children": [
				{
					"id": 490,
					"name": "apply",
					"kind": 2048,
					"kindString": "Method",
					"flags": {},
					"signatures": [
						{
							"id": 491,
							"name": "apply",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Entry point for a plugin. It should perform any kind of setup or initialization\nhook into compiler's events."
							},
							"parameters": [
								{
									"id": 492,
									"name": "compiler",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Webpack compiler instance.\n"
									},
									"type": {
										"type": "reference",
										"name": "Compiler"
									}
								}
							],
							"type": {
								"type": "intrinsic",
								"name": "void"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Methods",
					"kind": 2048,
					"children": [
						490
					]
				}
			],
			"sources": [
				{
					"fileName": "src/types.ts",
					"line": 14,
					"character": 30
				}
			],
			"implementedBy": [
				{
					"type": "reference",
					"id": 10,
					"name": "DevServerPlugin"
				},
				{
					"type": "reference",
					"id": 42,
					"name": "JavaScriptLooseModePlugin"
				},
				{
					"type": "reference",
					"id": 65,
					"name": "LoggerPlugin"
				},
				{
					"type": "reference",
					"id": 24,
					"name": "ReactNativeAssetsPlugin"
				},
				{
					"type": "reference",
					"id": 31,
					"name": "ReactNativeTargetPlugin"
				}
			]
		},
		{
			"id": 445,
			"name": "DevServerReply",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"sources": [
				{
					"fileName": "src/server/types.ts",
					"line": 28,
					"character": 26
				}
			],
			"type": {
				"type": "reference",
				"typeArguments": [
					{
						"type": "union",
						"types": [
							{
								"type": "reference",
								"name": "Server"
							},
							{
								"type": "reference",
								"name": "Http2SecureServer"
							}
						]
					},
					{
						"type": "reference",
						"name": "Http2ServerRequest"
					},
					{
						"type": "reference",
						"name": "Http2ServerResponse"
					},
					{
						"type": "reference",
						"name": "RouteGenericInterface"
					},
					{
						"type": "intrinsic",
						"name": "unknown"
					}
				],
				"name": "FastifyReply"
			}
		},
		{
			"id": 444,
			"name": "DevServerRequest",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"sources": [
				{
					"fileName": "src/server/types.ts",
					"line": 22,
					"character": 28
				}
			],
			"type": {
				"type": "reference",
				"typeArguments": [
					{
						"type": "reference",
						"name": "RouteGenericInterface"
					},
					{
						"type": "union",
						"types": [
							{
								"type": "reference",
								"name": "Server"
							},
							{
								"type": "reference",
								"name": "Http2SecureServer"
							}
						]
					},
					{
						"type": "reference",
						"name": "Http2ServerRequest"
					}
				],
				"name": "FastifyRequest"
			}
		},
		{
			"id": 443,
			"name": "FastifyDevServer",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"sources": [
				{
					"fileName": "src/server/types.ts",
					"line": 16,
					"character": 28
				}
			],
			"type": {
				"type": "reference",
				"typeArguments": [
					{
						"type": "union",
						"types": [
							{
								"type": "reference",
								"name": "Http2SecureServer"
							},
							{
								"type": "reference",
								"name": "Server"
							}
						]
					},
					{
						"type": "reference",
						"name": "Http2ServerRequest"
					},
					{
						"type": "reference",
						"name": "Http2ServerResponse"
					}
				],
				"name": "FastifyInstance"
			}
		},
		{
			"id": 53,
			"name": "GenericFilter",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"sources": [
				{
					"fileName": "src/webpack/plugins/LoggerPlugin.ts",
					"line": 5,
					"character": 25
				}
			],
			"type": {
				"type": "array",
				"elementType": {
					"type": "union",
					"types": [
						{
							"type": "intrinsic",
							"name": "string"
						},
						{
							"type": "reference",
							"name": "RegExp"
						}
					]
				}
			}
		},
		{
			"id": 550,
			"name": "LogType",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"comment": {
				"shortText": "Log message type."
			},
			"sources": [
				{
					"fileName": "src/types.ts",
					"line": 154,
					"character": 19
				}
			],
			"type": {
				"type": "union",
				"types": [
					{
						"type": "literal",
						"value": "debug"
					},
					{
						"type": "literal",
						"value": "info"
					},
					{
						"type": "literal",
						"value": "warn"
					},
					{
						"type": "literal",
						"value": "error"
					}
				]
			}
		},
		{
			"id": 94,
			"name": "OptionalWebpackOptions",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"sources": [
				{
					"fileName": "src/webpack/utils/parseCliOptions.ts",
					"line": 7,
					"character": 34
				}
			],
			"type": {
				"type": "mapped",
				"parameter": "K",
				"parameterType": {
					"type": "typeOperator",
					"operator": "keyof",
					"target": {
						"type": "reference",
						"id": 93,
						"name": "WebpackOptionsWithoutPlatform"
					}
				},
				"templateType": {
					"type": "indexedAccess",
					"indexType": {
						"type": "reference",
						"name": "K"
					},
					"objectType": {
						"type": "reference",
						"id": 537,
						"name": "WebpackOptions"
					}
				},
				"optionalModifier": "+"
			},
			"extendedBy": [
				{
					"type": "reference",
					"id": 95,
					"name": "FallbackWebpackOptions"
				}
			]
		},
		{
			"id": 488,
			"name": "WebpackLogger",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"comment": {
				"shortText": "Represent interface of Webpack logger.\nSee: https://webpack.js.org/api/logging/"
			},
			"sources": [
				{
					"fileName": "src/types.ts",
					"line": 7,
					"character": 25
				}
			],
			"type": {
				"type": "reference",
				"typeArguments": [
					{
						"type": "indexedAccess",
						"indexType": {
							"type": "literal",
							"value": "getInfrastructureLogger"
						},
						"objectType": {
							"type": "reference",
							"name": "webpack.Compiler"
						}
					}
				],
				"name": "ReturnType"
			}
		},
		{
			"id": 93,
			"name": "WebpackOptionsWithoutPlatform",
			"kind": 4194304,
			"kindString": "Type alias",
			"flags": {},
			"sources": [
				{
					"fileName": "src/webpack/utils/parseCliOptions.ts",
					"line": 5,
					"character": 41
				}
			],
			"type": {
				"type": "reference",
				"typeArguments": [
					{
						"type": "reference",
						"id": 537,
						"name": "WebpackOptions"
					},
					{
						"type": "literal",
						"value": "platform"
					}
				],
				"name": "Omit"
			}
		},
		{
			"id": 110,
			"name": "DEFAULT_FALLBACK",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isConst": true
			},
			"comment": {
				"shortText": "Sensible default for Webpack configuration to fallback to, when running with Webpack CLI."
			},
			"sources": [
				{
					"fileName": "src/webpack/utils/parseCliOptions.ts",
					"line": 35,
					"character": 29
				}
			],
			"type": {
				"type": "reference",
				"id": 93,
				"name": "WebpackOptionsWithoutPlatform"
			},
			"defaultValue": "..."
		},
		{
			"id": 111,
			"name": "DEFAULT_PORT",
			"kind": 32,
			"kindString": "Variable",
			"flags": {
				"isConst": true
			},
			"comment": {
				"shortText": "Default development server (proxy) port."
			},
			"sources": [
				{
					"fileName": "src/webpack/utils/parseCliOptions.ts",
					"line": 49,
					"character": 25
				}
			],
			"type": {
				"type": "literal",
				"value": 8081
			},
			"defaultValue": "8081"
		},
		{
			"id": 119,
			"name": "bundle",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "src/commands/bundle.ts",
					"line": 19,
					"character": 22
				}
			],
			"signatures": [
				{
					"id": 120,
					"name": "bundle",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Bundle command for React Native CLI.\nIt runs Webpack, builds bundle and saves it alongside any other assets and Source Map\nto filesystem.",
						"tags": [
							{
								"tag": "internal",
								"text": ""
							}
						]
					},
					"parameters": [
						{
							"id": 121,
							"name": "_",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "Original, non-parsed arguments that were provided when running this command."
							},
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							}
						},
						{
							"id": 122,
							"name": "config",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "React Native CLI configuration object."
							},
							"type": {
								"type": "reference",
								"name": "Config"
							}
						},
						{
							"id": 123,
							"name": "args",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "Parsed command line arguments.\n"
							},
							"type": {
								"type": "reference",
								"id": 497,
								"name": "BundleArguments"
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "void"
					}
				}
			]
		},
		{
			"id": 83,
			"name": "getInitializationEntries",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "src/webpack/utils/getInitializationEntries.ts",
					"line": 28,
					"character": 40
				}
			],
			"signatures": [
				{
					"id": 84,
					"name": "getInitializationEntries",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Get setup and initialization entires for Webpack configuration's `entry` field.\nThe returned entires should be added before your project entry.",
						"returns": "Array of entires.\n"
					},
					"parameters": [
						{
							"id": 85,
							"name": "reactNativePath",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "Absolute path to directory with React Native dependency."
							},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						},
						{
							"id": 86,
							"name": "options",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "Additional options that can modify returned entires."
							},
							"type": {
								"type": "reference",
								"id": 87,
								"name": "InitializationEntriesOptions"
							},
							"defaultValue": "..."
						}
					],
					"type": {
						"type": "array",
						"elementType": {
							"type": "intrinsic",
							"name": "string"
						}
					}
				}
			]
		},
		{
			"id": 112,
			"name": "getResolveOptions",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "src/webpack/utils/getResolveOptions.ts",
					"line": 11,
					"character": 33
				}
			],
			"signatures": [
				{
					"id": 113,
					"name": "getResolveOptions",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Get Webpack's resolve options to properly resolve JavaScript files\nthat contain `<platform>` or `native` (eg `file.ios.js`) suffixes as well as `react-native` field\nin dependencies' `package.json`.",
						"returns": "Webpack's resolve options.\n"
					},
					"parameters": [
						{
							"id": 114,
							"name": "platform",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "Target application platform."
							},
							"type": {
								"type": "intrinsic",
								"name": "string"
							}
						}
					],
					"type": {
						"type": "reflection",
						"declaration": {
							"id": 115,
							"name": "__type",
							"kind": 65536,
							"kindString": "Type literal",
							"flags": {},
							"children": [
								{
									"id": 117,
									"name": "aliasFields",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									},
									"defaultValue": "..."
								},
								{
									"id": 118,
									"name": "extensions",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									},
									"defaultValue": "..."
								},
								{
									"id": 116,
									"name": "mainFields",
									"kind": 1024,
									"kindString": "Property",
									"flags": {},
									"type": {
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "string"
										}
									},
									"defaultValue": "..."
								}
							],
							"groups": [
								{
									"title": "Properties",
									"kind": 1024,
									"children": [
										117,
										118,
										116
									]
								}
							]
						}
					}
				}
			]
		},
		{
			"id": 90,
			"name": "parseCliOptions",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "src/webpack/utils/parseCliOptions.ts",
					"line": 61,
					"character": 31
				}
			],
			"signatures": [
				{
					"id": 91,
					"name": "parseCliOptions",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Parse CLI arguments received from React Native CLI when running {@link start} or {@link bundle}\ncommands. The CLI options will be only available when running with React Native CLI. When running\nwith Webpack CLI, values from `fallback` field from {@link ParseCliOptionsConfig} will be used.",
						"returns": "Webpack options to create a valid Webpack configuration with.\n"
					},
					"parameters": [
						{
							"id": 92,
							"name": "config",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "Configuration options."
							},
							"type": {
								"type": "reference",
								"id": 108,
								"name": "ParseCliOptionsConfig"
							}
						}
					],
					"type": {
						"type": "reference",
						"id": 537,
						"name": "WebpackOptions"
					}
				}
			]
		},
		{
			"id": 124,
			"name": "start",
			"kind": 64,
			"kindString": "Function",
			"flags": {},
			"sources": [
				{
					"fileName": "src/commands/start.ts",
					"line": 21,
					"character": 21
				}
			],
			"signatures": [
				{
					"id": 125,
					"name": "start",
					"kind": 4096,
					"kindString": "Call signature",
					"flags": {},
					"comment": {
						"shortText": "Start command for React Native CLI.\nIt runs {@link DevServerProxy} to provide Development Server functionality to React Native apps\nin development mode.",
						"tags": [
							{
								"tag": "internal",
								"text": ""
							}
						]
					},
					"parameters": [
						{
							"id": 126,
							"name": "_",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "Original, non-parsed arguments that were provided when running this command."
							},
							"type": {
								"type": "array",
								"elementType": {
									"type": "intrinsic",
									"name": "string"
								}
							}
						},
						{
							"id": 127,
							"name": "config",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "React Native CLI configuration object."
							},
							"type": {
								"type": "reference",
								"name": "Config"
							}
						},
						{
							"id": 128,
							"name": "args",
							"kind": 32768,
							"kindString": "Parameter",
							"flags": {},
							"comment": {
								"text": "Parsed command line arguments.\n"
							},
							"type": {
								"type": "reference",
								"id": 507,
								"name": "StartArguments"
							}
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "void"
					}
				}
			]
		}
	],
	"groups": [
		{
			"title": "Classes",
			"kind": 128,
			"children": [
				302,
				325,
				10,
				358,
				42,
				65,
				24,
				31,
				568,
				417,
				141,
				165,
				190,
				214,
				241,
				129
			],
			"categories": [
				{
					"title": "Webpack Plugin",
					"children": [
						10,
						42,
						65,
						24,
						31
					]
				},
				{
					"title": "Development server",
					"children": [
						302,
						325,
						358,
						141,
						165,
						190,
						214,
						241,
						129
					]
				},
				{
					"title": "Other",
					"children": [
						568,
						417
					]
				}
			]
		},
		{
			"title": "Interfaces",
			"kind": 256,
			"children": [
				294,
				497,
				525,
				407,
				181,
				493,
				355,
				317,
				446,
				517,
				1,
				347,
				186,
				95,
				563,
				556,
				87,
				396,
				37,
				551,
				54,
				108,
				17,
				230,
				233,
				391,
				566,
				401,
				507,
				414,
				179,
				212,
				537,
				489
			]
		},
		{
			"title": "Type aliases",
			"kind": 4194304,
			"children": [
				445,
				444,
				443,
				53,
				550,
				94,
				488,
				93
			]
		},
		{
			"title": "Variables",
			"kind": 32,
			"children": [
				110,
				111
			]
		},
		{
			"title": "Functions",
			"kind": 64,
			"children": [
				119,
				83,
				112,
				90,
				124
			],
			"categories": [
				{
					"title": "CLI command",
					"children": [
						119,
						124
					]
				},
				{
					"title": "Webpack util",
					"children": [
						83,
						112,
						90
					]
				}
			]
		}
	],
	"sources": [
		{
			"fileName": "src/index.ts",
			"line": 1,
			"character": 0
		}
	]
}